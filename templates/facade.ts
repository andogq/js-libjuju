import {facadeTemplate} from "../generator/interfaces";

export default (f: facadeTemplate): string => {

  const lowerCaseFirstChar = (name: string): string =>
    name.charAt(0).toLowerCase() + name.slice(1);

  const lcMethodName = lowerCaseFirstChar(m.name);

  return `
  /**
    Juju ${f.name} version ${f.version}.
    ${f.availableOnControllers ? 'This API facade is available on controller connections.': ''}
    ${f.availableOnModels ? 'This API facade is available on model connections.': ''}

    NOTE: this file has been generated by the generate command in js-libjuju
    on ${new Date(Date.now()).toUTCString()}. Do not manually edit this file.
  */

  import {autoBind, createAsyncHandler} from "../transform.js";
  import wrappers from "../wrappers.js";

  /**
   ${f.docBlock}
  */
  export default class ${f.name}V${f.version} {
    version: number;

    constructor() {
      this.version = ${f.version};

      // Automatically bind all methods to instances.
      autoBind(this);
    }

    ${f.methods.forEach(m =>
      `
      ${m.params ?
      `
      interface ${lcMethodName}Params {
        ${m.params.forEach(p =>
          `${p[0]}: ${p[1].type};`
        )}
      }
      `: ``}

      /**
        ${m.docBlock}
        ${m.params ? `

        `: ``}
      */
      ${lcMethodName}(${m.params ? `params: ${lcMethodName}Params, callback`: 'callback'}) {
        return new Promise((resolve, reject) => {

          const req = {
            type: '${f.name}',
            request: '${m.name}',
            version: '${f.version}',
            params: params'
          };

          let transform = null;
          ${m.result ? `
          transform = resp => {
            let result;
            // XXX generate the result
            return result;
          };
          `: ``}

          const handler = createAsyncHandler(callback, resolve, reject, transform);
          this._transport.write(req, handler);
        });
      }
      `)}



    if (wrappers.wrap${f.name}) {
      ${f.name}V${f.version} = wrappers.wrap${f.name}(${f.name}V${f.version});
    }
  }
  `;
}
