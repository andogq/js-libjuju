/**
  Juju {{ name }} version {{ version }}.
  {%- if available_on_controllers and available_on_models %}
  This API facade is available on both controller and model connections.
  {%- elif available_on_controllers %}
  This API facade is available on controller connections.
  {%- elif available_on_models %}
  This API facade is available on model connections.
  {%- endif %}

  NOTE: this file has been generated by the generate command in js-libjuju
  on {{ time }}. Do not manually edit this file.
*/

'use strict';


/**
  {{ doc }}
*/
class {{ name }}V{{ version }} {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = {{ version }};
  }
  {%- for method in methods %}

  /**
    {{ method.doc }}
    {%- if method.params %}
    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {{ method.params.docstring()|indent(8) }}
    {%- endif %}
    {%- if method.result %}
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {{ method.result.docstring()|indent(8) }}
    {%- else %}
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    {%- endif %}
  */
  {{ method.name() }}({% if method.params %}args, {% endif %}callback) {
    return new Promise((resolve, reject) => {
      {%- if method.params %}
      // Prepare request parameters.
      let params;
      {{ method.params.generate_request('params', 'args')|indent(6) }}
      {%- else %}
      const params = {};
      {%- endif %}
      // Prepare the request to the Juju API.
      const req = {
        type: '{{ name }}',
        request: '{{ method.request }}',
        version: {{ version }},
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      {%- if method.result %}
      transform = resp => {
        let result;
        {{ method.result.generate_response('result', 'resp')|indent(8) }}
        return result
      }
      {%- endif %}

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
  {%- endfor %}
}


const wrappers = require('../wrappers.js');
if (wrappers.wrap{{ name }}) {
  // Decorate the facade class in order to improve user experience.
  {{ name }}V{{ version }} = wrappers.wrap{{ name }}({{ name }}V{{ version }});
}

/**
  Create an async handler which will either return a value to a supplied
  callback, or call the appropriate method on the promise resolve/reject.
  @param {Function} [callback] The optional callback.
  @param {Function} [resolve] The optional promise resolve function.
  @param {Function} [reject] The optional promise reject function.
  @param {Function} [transform] The optional response transform function.
  @return {Function} The returned function takes two arguments (err, value).
    If the the callback is a function the two arguments will be passed through
    to the callback in the same order. If no callback is supplied, the promise
    resolve or reject method will be called depending on the existence of an
    error value.
*/
function createAsyncHandler (callback, resolve, reject, transform) {
  return (error, value) => {
    if (typeof transform === 'function' && value) {
      value = transform(value);
    }
    if (!value) {
      value = {};
    }
    if (typeof callback === 'function') {
      callback(error, value);
      return;
    }
    if (error) {
      reject(error);
      return;
    }
    resolve(value);
  };
};

module.exports = {{ name }}V{{ version }};
