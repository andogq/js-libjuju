/**
  Juju {{ name }} version {{ version }}.
  {%- if available_on_controllers and available_on_models %}
  This API facade is available on both controller and model connections.
  {%- elif available_on_controllers %}
  This API facade is available on controller connections.
  {%- elif available_on_models %}
  This API facade is available on model connections.
  {%- endif %}

  NOTE: this file has been generated by the generate command in js-libjuju
  on {{ time }}. Do not manually edit this file.
*/

'use strict';


/**
  {{ doc }}
*/
class {{ name }}V{{ version }} {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = {{ version }};
  }
  {%- for method in methods %}

  /**
    {{ method.doc }}
    {%- if method.params %}
    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {{ method.params.docstring()|indent(8) }}
    {%- endif %}
    {%- if method.result %}
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {{ method.result.docstring()|indent(8) }}
    {%- else %}
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    {%- endif %}
  */
  {{ method.name() }}({% if method.params %}args, {% endif %}callback) {
    {%- if method.params %}
    // Prepare request parameters.
    let params;
    {{ method.params.generate_request('params', 'args')|indent() }}
    {%- else %}
    const params = {};
    {%- endif %}
    // Prepare the request to the Juju API.
    const req = {
      type: '{{ name }}',
      request: '{{ method.request }}',
      version: {{ version }},
      params: params
    };
    // Define a transform method if necessary.
    let transform = null;
    {%- if method.result %}
    transform = resp => {
      let result;
      {{ method.result.generate_response('result', 'resp')|indent(6) }}
      return result
    }
    {%- endif %}
    // If we do not have a callback provided then assume it's being used as a promise.
    let handler = null;
    if (callback) {
      handler = (err, resp) => {
        if (err) {
          callback(err, {});
          return;
        }
        {%- if method.result %}
        // Handle the response.
        callback(null, resp);
        {%- else %}
        callback(null, {});
        {%- endif %}
      }
    }
    // Send the request to the server.
    return this._transport.write(req, handler, transform);
  }
  {%- endfor %}
}


const wrappers = require('../wrappers.js');
if (wrappers.wrap{{ name }}) {
  // Decorate the facade class in order to improve user experience.
  {{ name }}V{{ version }} = wrappers.wrap{{ name }}({{ name }}V{{ version }});
}

module.exports = {{ name }}V{{ version }};
