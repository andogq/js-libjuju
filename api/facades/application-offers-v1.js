/**
  Juju ApplicationOffers version 1.
  This API facade is available on controller connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Fri 2018/11/16 13:11:58 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  OffersAPI implements the cross model interface and is the concrete
  implementation of the api end point.
*/
class ApplicationOffersV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    ApplicationOffers gets details about remote applications that match given
    URLs.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          offerUrls: []string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              applicationofferdetails: {
                sourceModelTag: string,
                offerUuid: string,
                offerUrl: string,
                offerName: string,
                applicationDescription: string,
                endpoints: []{
                  name: string,
                  role: string,
                  interface: string,
                  limit: int
                },
                spaces: []{
                  cloudType: string,
                  name: string,
                  providerId: string,
                  providerAttributes: map[string]anything,
                  subnets: []{
                    cidr: string,
                    providerId: string,
                    providerNetworkId: string,
                    providerSpaceId: string,
                    vlanTag: int,
                    life: string,
                    spaceTag: string,
                    zones: []string,
                    status: string
                  }
                },
                bindings: map[string]string,
                users: []{
                  user: string,
                  displayName: string,
                  access: string
                }
              },
              applicationName: string,
              charmUrl: string,
              connections: []{
                sourceModelTag: string,
                relationId: int,
                username: string,
                endpoint: string,
                status: {
                  status: string,
                  info: string,
                  data: map[string]anything,
                  since: time
                },
                ingressSubnets: []string
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  applicationOffers(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#OfferURLs
      if (args) {
        params = {};
        params['offer-urls'] = [];
        args.offerUrls = args.offerUrls || [];
        for (let i = 0; i < args.offerUrls.length; i++) {
          params['offer-urls'][i] = args.offerUrls[i];
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'ApplicationOffers',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ApplicationOffersResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ApplicationOfferResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ApplicationOfferAdminDetails
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                // github.com/juju/juju/apiserver/params#ApplicationOfferDetails
                if (resp['results'][i]['result']['ApplicationOfferDetails']) {
                  result.results[i].result.applicationofferdetails = {};
                  result.results[i].result.applicationofferdetails.sourceModelTag = resp['results'][i]['result']['ApplicationOfferDetails']['source-model-tag'];
                  result.results[i].result.applicationofferdetails.offerUuid = resp['results'][i]['result']['ApplicationOfferDetails']['offer-uuid'];
                  result.results[i].result.applicationofferdetails.offerUrl = resp['results'][i]['result']['ApplicationOfferDetails']['offer-url'];
                  result.results[i].result.applicationofferdetails.offerName = resp['results'][i]['result']['ApplicationOfferDetails']['offer-name'];
                  result.results[i].result.applicationofferdetails.applicationDescription = resp['results'][i]['result']['ApplicationOfferDetails']['application-description'];
                  result.results[i].result.applicationofferdetails.endpoints = [];
                  resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'] = resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#RemoteEndpoint
                    if (resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'][i2]) {
                      result.results[i].result.applicationofferdetails.endpoints[i2] = {};
                      result.results[i].result.applicationofferdetails.endpoints[i2].name = resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'][i2]['name'];
                      // gopkg.in/juju/charm.v6#RelationRole
                      result.results[i].result.applicationofferdetails.endpoints[i2].role = resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'][i2]['role'];
                      result.results[i].result.applicationofferdetails.endpoints[i2].interface = resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'][i2]['interface'];
                      result.results[i].result.applicationofferdetails.endpoints[i2].limit = resp['results'][i]['result']['ApplicationOfferDetails']['endpoints'][i2]['limit'];
                    }
                  }
                  result.results[i].result.applicationofferdetails.spaces = [];
                  resp['results'][i]['result']['ApplicationOfferDetails']['spaces'] = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['result']['ApplicationOfferDetails']['spaces'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#RemoteSpace
                    if (resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]) {
                      result.results[i].result.applicationofferdetails.spaces[i2] = {};
                      result.results[i].result.applicationofferdetails.spaces[i2].cloudType = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['cloud-type'];
                      result.results[i].result.applicationofferdetails.spaces[i2].name = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['name'];
                      result.results[i].result.applicationofferdetails.spaces[i2].providerId = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['provider-id'];
                      result.results[i].result.applicationofferdetails.spaces[i2].providerAttributes = {};
                      resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'] = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'] || {};
                      for (let k in resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['provider-attributes']) {
                        result.results[i].result.applicationofferdetails.spaces[i2].providerAttributes[k] = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'][k];
                      }
                      result.results[i].result.applicationofferdetails.spaces[i2].subnets = [];
                      resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'] = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'] || [];
                      for (let i3 = 0; i3 < resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'].length; i3++) {
                        // github.com/juju/juju/apiserver/params#Subnet
                        if (resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]) {
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3] = {};
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].cidr = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['cidr'];
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].providerId = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-id'];
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].providerNetworkId = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-network-id'];
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].providerSpaceId = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-space-id'];
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].vlanTag = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['vlan-tag'];
                          // github.com/juju/juju/apiserver/params#Life
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].life = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['life'];
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].spaceTag = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['space-tag'];
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].zones = [];
                          resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'] = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'] || [];
                          for (let i4 = 0; i4 < resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'].length; i4++) {
                            result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].zones[i4] = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'][i4];
                          }
                          result.results[i].result.applicationofferdetails.spaces[i2].subnets[i3].status = resp['results'][i]['result']['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['status'];
                        }
                      }
                    }
                  }
                  result.results[i].result.applicationofferdetails.bindings = {};
                  resp['results'][i]['result']['ApplicationOfferDetails']['bindings'] = resp['results'][i]['result']['ApplicationOfferDetails']['bindings'] || {};
                  for (let k in resp['results'][i]['result']['ApplicationOfferDetails']['bindings']) {
                    result.results[i].result.applicationofferdetails.bindings[k] = resp['results'][i]['result']['ApplicationOfferDetails']['bindings'][k];
                  }
                  result.results[i].result.applicationofferdetails.users = [];
                  resp['results'][i]['result']['ApplicationOfferDetails']['users'] = resp['results'][i]['result']['ApplicationOfferDetails']['users'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['result']['ApplicationOfferDetails']['users'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#OfferUserDetails
                    if (resp['results'][i]['result']['ApplicationOfferDetails']['users'][i2]) {
                      result.results[i].result.applicationofferdetails.users[i2] = {};
                      result.results[i].result.applicationofferdetails.users[i2].user = resp['results'][i]['result']['ApplicationOfferDetails']['users'][i2]['user'];
                      result.results[i].result.applicationofferdetails.users[i2].displayName = resp['results'][i]['result']['ApplicationOfferDetails']['users'][i2]['display-name'];
                      result.results[i].result.applicationofferdetails.users[i2].access = resp['results'][i]['result']['ApplicationOfferDetails']['users'][i2]['access'];
                    }
                  }
                }
                result.results[i].result.applicationName = resp['results'][i]['result']['application-name'];
                result.results[i].result.charmUrl = resp['results'][i]['result']['charm-url'];
                result.results[i].result.connections = [];
                resp['results'][i]['result']['connections'] = resp['results'][i]['result']['connections'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['connections'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#OfferConnection
                  if (resp['results'][i]['result']['connections'][i2]) {
                    result.results[i].result.connections[i2] = {};
                    result.results[i].result.connections[i2].sourceModelTag = resp['results'][i]['result']['connections'][i2]['source-model-tag'];
                    result.results[i].result.connections[i2].relationId = resp['results'][i]['result']['connections'][i2]['relation-id'];
                    result.results[i].result.connections[i2].username = resp['results'][i]['result']['connections'][i2]['username'];
                    result.results[i].result.connections[i2].endpoint = resp['results'][i]['result']['connections'][i2]['endpoint'];
                    // github.com/juju/juju/apiserver/params#EntityStatus
                    if (resp['results'][i]['result']['connections'][i2]['status']) {
                      result.results[i].result.connections[i2].status = {};
                      // github.com/juju/juju/core/status#Status
                      result.results[i].result.connections[i2].status.status = resp['results'][i]['result']['connections'][i2]['status']['status'];
                      result.results[i].result.connections[i2].status.info = resp['results'][i]['result']['connections'][i2]['status']['info'];
                      result.results[i].result.connections[i2].status.data = {};
                      resp['results'][i]['result']['connections'][i2]['status']['data'] = resp['results'][i]['result']['connections'][i2]['status']['data'] || {};
                      for (let k in resp['results'][i]['result']['connections'][i2]['status']['data']) {
                        result.results[i].result.connections[i2].status.data[k] = resp['results'][i]['result']['connections'][i2]['status']['data'][k];
                      }
                      // time#Time
                      result.results[i].result.connections[i2].status.since = resp['results'][i]['result']['connections'][i2]['status']['since'];
                    }
                    result.results[i].result.connections[i2].ingressSubnets = [];
                    resp['results'][i]['result']['connections'][i2]['ingress-subnets'] = resp['results'][i]['result']['connections'][i2]['ingress-subnets'] || [];
                    for (let i3 = 0; i3 < resp['results'][i]['result']['connections'][i2]['ingress-subnets'].length; i3++) {
                      result.results[i].result.connections[i2].ingressSubnets[i3] = resp['results'][i]['result']['connections'][i2]['ingress-subnets'][i3];
                    }
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    DestroyOffers removes the offers specified by the given URLs.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          offerUrls: []string,
          force: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  destroyOffers(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#DestroyApplicationOffers
      if (args) {
        params = {};
        params['offer-urls'] = [];
        args.offerUrls = args.offerUrls || [];
        for (let i = 0; i < args.offerUrls.length; i++) {
          params['offer-urls'][i] = args.offerUrls[i];
        }
        params['force'] = args.force;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'DestroyOffers',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    FindApplicationOffers gets details about remote applications that match
    given filter.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          filters: []{
            ownerName: string,
            modelName: string,
            offerName: string,
            applicationName: string,
            applicationDescription: string,
            applicationUser: string,
            endpoints: []{
              role: string,
              interface: string,
              name: string
            },
            connectedUsers: []string,
            allowedUsers: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            applicationofferdetails: {
              sourceModelTag: string,
              offerUuid: string,
              offerUrl: string,
              offerName: string,
              applicationDescription: string,
              endpoints: []{
                name: string,
                role: string,
                interface: string,
                limit: int
              },
              spaces: []{
                cloudType: string,
                name: string,
                providerId: string,
                providerAttributes: map[string]anything,
                subnets: []{
                  cidr: string,
                  providerId: string,
                  providerNetworkId: string,
                  providerSpaceId: string,
                  vlanTag: int,
                  life: string,
                  spaceTag: string,
                  zones: []string,
                  status: string
                }
              },
              bindings: map[string]string,
              users: []{
                user: string,
                displayName: string,
                access: string
              }
            },
            applicationName: string,
            charmUrl: string,
            connections: []{
              sourceModelTag: string,
              relationId: int,
              username: string,
              endpoint: string,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              ingressSubnets: []string
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  findApplicationOffers(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#OfferFilters
      if (args) {
        params = {};
        params['Filters'] = [];
        args.filters = args.filters || [];
        for (let i = 0; i < args.filters.length; i++) {
          // github.com/juju/juju/apiserver/params#OfferFilter
          if (args.filters[i]) {
            params['Filters'][i] = {};
            params['Filters'][i]['owner-name'] = args.filters[i].ownerName;
            params['Filters'][i]['model-name'] = args.filters[i].modelName;
            params['Filters'][i]['offer-name'] = args.filters[i].offerName;
            params['Filters'][i]['application-name'] = args.filters[i].applicationName;
            params['Filters'][i]['application-description'] = args.filters[i].applicationDescription;
            params['Filters'][i]['application-user'] = args.filters[i].applicationUser;
            params['Filters'][i]['endpoints'] = [];
            args.filters[i].endpoints = args.filters[i].endpoints || [];
            for (let i2 = 0; i2 < args.filters[i].endpoints.length; i2++) {
              // github.com/juju/juju/apiserver/params#EndpointFilterAttributes
              if (args.filters[i].endpoints[i2]) {
                params['Filters'][i]['endpoints'][i2] = {};
                // gopkg.in/juju/charm.v6#RelationRole
                params['Filters'][i]['endpoints'][i2]['role'] = args.filters[i].endpoints[i2].role;
                params['Filters'][i]['endpoints'][i2]['interface'] = args.filters[i].endpoints[i2].interface;
                params['Filters'][i]['endpoints'][i2]['name'] = args.filters[i].endpoints[i2].name;
              }
            }
            params['Filters'][i]['connected-users'] = [];
            args.filters[i].connectedUsers = args.filters[i].connectedUsers || [];
            for (let i2 = 0; i2 < args.filters[i].connectedUsers.length; i2++) {
              params['Filters'][i]['connected-users'][i2] = args.filters[i].connectedUsers[i2];
            }
            params['Filters'][i]['allowed-users'] = [];
            args.filters[i].allowedUsers = args.filters[i].allowedUsers || [];
            for (let i2 = 0; i2 < args.filters[i].allowedUsers.length; i2++) {
              params['Filters'][i]['allowed-users'][i2] = args.filters[i].allowedUsers[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'FindApplicationOffers',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#QueryApplicationOffersResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ApplicationOfferAdminDetails
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ApplicationOfferDetails
              if (resp['results'][i]['ApplicationOfferDetails']) {
                result.results[i].applicationofferdetails = {};
                result.results[i].applicationofferdetails.sourceModelTag = resp['results'][i]['ApplicationOfferDetails']['source-model-tag'];
                result.results[i].applicationofferdetails.offerUuid = resp['results'][i]['ApplicationOfferDetails']['offer-uuid'];
                result.results[i].applicationofferdetails.offerUrl = resp['results'][i]['ApplicationOfferDetails']['offer-url'];
                result.results[i].applicationofferdetails.offerName = resp['results'][i]['ApplicationOfferDetails']['offer-name'];
                result.results[i].applicationofferdetails.applicationDescription = resp['results'][i]['ApplicationOfferDetails']['application-description'];
                result.results[i].applicationofferdetails.endpoints = [];
                resp['results'][i]['ApplicationOfferDetails']['endpoints'] = resp['results'][i]['ApplicationOfferDetails']['endpoints'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['ApplicationOfferDetails']['endpoints'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#RemoteEndpoint
                  if (resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]) {
                    result.results[i].applicationofferdetails.endpoints[i2] = {};
                    result.results[i].applicationofferdetails.endpoints[i2].name = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['name'];
                    // gopkg.in/juju/charm.v6#RelationRole
                    result.results[i].applicationofferdetails.endpoints[i2].role = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['role'];
                    result.results[i].applicationofferdetails.endpoints[i2].interface = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['interface'];
                    result.results[i].applicationofferdetails.endpoints[i2].limit = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['limit'];
                  }
                }
                result.results[i].applicationofferdetails.spaces = [];
                resp['results'][i]['ApplicationOfferDetails']['spaces'] = resp['results'][i]['ApplicationOfferDetails']['spaces'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['ApplicationOfferDetails']['spaces'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#RemoteSpace
                  if (resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]) {
                    result.results[i].applicationofferdetails.spaces[i2] = {};
                    result.results[i].applicationofferdetails.spaces[i2].cloudType = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['cloud-type'];
                    result.results[i].applicationofferdetails.spaces[i2].name = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['name'];
                    result.results[i].applicationofferdetails.spaces[i2].providerId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-id'];
                    result.results[i].applicationofferdetails.spaces[i2].providerAttributes = {};
                    resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'] || {};
                    for (let k in resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes']) {
                      result.results[i].applicationofferdetails.spaces[i2].providerAttributes[k] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'][k];
                    }
                    result.results[i].applicationofferdetails.spaces[i2].subnets = [];
                    resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'] || [];
                    for (let i3 = 0; i3 < resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'].length; i3++) {
                      // github.com/juju/juju/apiserver/params#Subnet
                      if (resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]) {
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3] = {};
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].cidr = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['cidr'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].providerId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-id'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].providerNetworkId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-network-id'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].providerSpaceId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-space-id'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].vlanTag = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['vlan-tag'];
                        // github.com/juju/juju/apiserver/params#Life
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].life = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['life'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].spaceTag = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['space-tag'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].zones = [];
                        resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'] || [];
                        for (let i4 = 0; i4 < resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'].length; i4++) {
                          result.results[i].applicationofferdetails.spaces[i2].subnets[i3].zones[i4] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'][i4];
                        }
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].status = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['status'];
                      }
                    }
                  }
                }
                result.results[i].applicationofferdetails.bindings = {};
                resp['results'][i]['ApplicationOfferDetails']['bindings'] = resp['results'][i]['ApplicationOfferDetails']['bindings'] || {};
                for (let k in resp['results'][i]['ApplicationOfferDetails']['bindings']) {
                  result.results[i].applicationofferdetails.bindings[k] = resp['results'][i]['ApplicationOfferDetails']['bindings'][k];
                }
                result.results[i].applicationofferdetails.users = [];
                resp['results'][i]['ApplicationOfferDetails']['users'] = resp['results'][i]['ApplicationOfferDetails']['users'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['ApplicationOfferDetails']['users'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#OfferUserDetails
                  if (resp['results'][i]['ApplicationOfferDetails']['users'][i2]) {
                    result.results[i].applicationofferdetails.users[i2] = {};
                    result.results[i].applicationofferdetails.users[i2].user = resp['results'][i]['ApplicationOfferDetails']['users'][i2]['user'];
                    result.results[i].applicationofferdetails.users[i2].displayName = resp['results'][i]['ApplicationOfferDetails']['users'][i2]['display-name'];
                    result.results[i].applicationofferdetails.users[i2].access = resp['results'][i]['ApplicationOfferDetails']['users'][i2]['access'];
                  }
                }
              }
              result.results[i].applicationName = resp['results'][i]['application-name'];
              result.results[i].charmUrl = resp['results'][i]['charm-url'];
              result.results[i].connections = [];
              resp['results'][i]['connections'] = resp['results'][i]['connections'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['connections'].length; i2++) {
                // github.com/juju/juju/apiserver/params#OfferConnection
                if (resp['results'][i]['connections'][i2]) {
                  result.results[i].connections[i2] = {};
                  result.results[i].connections[i2].sourceModelTag = resp['results'][i]['connections'][i2]['source-model-tag'];
                  result.results[i].connections[i2].relationId = resp['results'][i]['connections'][i2]['relation-id'];
                  result.results[i].connections[i2].username = resp['results'][i]['connections'][i2]['username'];
                  result.results[i].connections[i2].endpoint = resp['results'][i]['connections'][i2]['endpoint'];
                  // github.com/juju/juju/apiserver/params#EntityStatus
                  if (resp['results'][i]['connections'][i2]['status']) {
                    result.results[i].connections[i2].status = {};
                    // github.com/juju/juju/core/status#Status
                    result.results[i].connections[i2].status.status = resp['results'][i]['connections'][i2]['status']['status'];
                    result.results[i].connections[i2].status.info = resp['results'][i]['connections'][i2]['status']['info'];
                    result.results[i].connections[i2].status.data = {};
                    resp['results'][i]['connections'][i2]['status']['data'] = resp['results'][i]['connections'][i2]['status']['data'] || {};
                    for (let k in resp['results'][i]['connections'][i2]['status']['data']) {
                      result.results[i].connections[i2].status.data[k] = resp['results'][i]['connections'][i2]['status']['data'][k];
                    }
                    // time#Time
                    result.results[i].connections[i2].status.since = resp['results'][i]['connections'][i2]['status']['since'];
                  }
                  result.results[i].connections[i2].ingressSubnets = [];
                  resp['results'][i]['connections'][i2]['ingress-subnets'] = resp['results'][i]['connections'][i2]['ingress-subnets'] || [];
                  for (let i3 = 0; i3 < resp['results'][i]['connections'][i2]['ingress-subnets'].length; i3++) {
                    result.results[i].connections[i2].ingressSubnets[i3] = resp['results'][i]['connections'][i2]['ingress-subnets'][i3];
                  }
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    GetConsumeDetails returns the details necessary to pass to another model to
    consume the specified offers represented by the urls.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          offerUrls: []string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            consumeofferdetails: {
              offer: {
                sourceModelTag: string,
                offerUuid: string,
                offerUrl: string,
                offerName: string,
                applicationDescription: string,
                endpoints: []{
                  name: string,
                  role: string,
                  interface: string,
                  limit: int
                },
                spaces: []{
                  cloudType: string,
                  name: string,
                  providerId: string,
                  providerAttributes: map[string]anything,
                  subnets: []{
                    cidr: string,
                    providerId: string,
                    providerNetworkId: string,
                    providerSpaceId: string,
                    vlanTag: int,
                    life: string,
                    spaceTag: string,
                    zones: []string,
                    status: string
                  }
                },
                bindings: map[string]string,
                users: []{
                  user: string,
                  displayName: string,
                  access: string
                }
              },
              macaroon: anything,
              externalController: {
                controllerTag: string,
                controllerAlias: string,
                addrs: []string,
                caCert: string
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  getConsumeDetails(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#OfferURLs
      if (args) {
        params = {};
        params['offer-urls'] = [];
        args.offerUrls = args.offerUrls || [];
        for (let i = 0; i < args.offerUrls.length; i++) {
          params['offer-urls'][i] = args.offerUrls[i];
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'GetConsumeDetails',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ConsumeOfferDetailsResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ConsumeOfferDetailsResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ConsumeOfferDetails
              if (resp['results'][i]['ConsumeOfferDetails']) {
                result.results[i].consumeofferdetails = {};
                // github.com/juju/juju/apiserver/params#ApplicationOfferDetails
                if (resp['results'][i]['ConsumeOfferDetails']['offer']) {
                  result.results[i].consumeofferdetails.offer = {};
                  result.results[i].consumeofferdetails.offer.sourceModelTag = resp['results'][i]['ConsumeOfferDetails']['offer']['source-model-tag'];
                  result.results[i].consumeofferdetails.offer.offerUuid = resp['results'][i]['ConsumeOfferDetails']['offer']['offer-uuid'];
                  result.results[i].consumeofferdetails.offer.offerUrl = resp['results'][i]['ConsumeOfferDetails']['offer']['offer-url'];
                  result.results[i].consumeofferdetails.offer.offerName = resp['results'][i]['ConsumeOfferDetails']['offer']['offer-name'];
                  result.results[i].consumeofferdetails.offer.applicationDescription = resp['results'][i]['ConsumeOfferDetails']['offer']['application-description'];
                  result.results[i].consumeofferdetails.offer.endpoints = [];
                  resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'] = resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#RemoteEndpoint
                    if (resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'][i2]) {
                      result.results[i].consumeofferdetails.offer.endpoints[i2] = {};
                      result.results[i].consumeofferdetails.offer.endpoints[i2].name = resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'][i2]['name'];
                      // gopkg.in/juju/charm.v6#RelationRole
                      result.results[i].consumeofferdetails.offer.endpoints[i2].role = resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'][i2]['role'];
                      result.results[i].consumeofferdetails.offer.endpoints[i2].interface = resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'][i2]['interface'];
                      result.results[i].consumeofferdetails.offer.endpoints[i2].limit = resp['results'][i]['ConsumeOfferDetails']['offer']['endpoints'][i2]['limit'];
                    }
                  }
                  result.results[i].consumeofferdetails.offer.spaces = [];
                  resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'] = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#RemoteSpace
                    if (resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]) {
                      result.results[i].consumeofferdetails.offer.spaces[i2] = {};
                      result.results[i].consumeofferdetails.offer.spaces[i2].cloudType = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['cloud-type'];
                      result.results[i].consumeofferdetails.offer.spaces[i2].name = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['name'];
                      result.results[i].consumeofferdetails.offer.spaces[i2].providerId = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['provider-id'];
                      result.results[i].consumeofferdetails.offer.spaces[i2].providerAttributes = {};
                      resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['provider-attributes'] = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['provider-attributes'] || {};
                      for (let k in resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['provider-attributes']) {
                        result.results[i].consumeofferdetails.offer.spaces[i2].providerAttributes[k] = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['provider-attributes'][k];
                      }
                      result.results[i].consumeofferdetails.offer.spaces[i2].subnets = [];
                      resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'] = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'] || [];
                      for (let i3 = 0; i3 < resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'].length; i3++) {
                        // github.com/juju/juju/apiserver/params#Subnet
                        if (resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]) {
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3] = {};
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].cidr = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['cidr'];
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].providerId = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['provider-id'];
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].providerNetworkId = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['provider-network-id'];
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].providerSpaceId = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['provider-space-id'];
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].vlanTag = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['vlan-tag'];
                          // github.com/juju/juju/apiserver/params#Life
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].life = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['life'];
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].spaceTag = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['space-tag'];
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].zones = [];
                          resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['zones'] = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['zones'] || [];
                          for (let i4 = 0; i4 < resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['zones'].length; i4++) {
                            result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].zones[i4] = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['zones'][i4];
                          }
                          result.results[i].consumeofferdetails.offer.spaces[i2].subnets[i3].status = resp['results'][i]['ConsumeOfferDetails']['offer']['spaces'][i2]['subnets'][i3]['status'];
                        }
                      }
                    }
                  }
                  result.results[i].consumeofferdetails.offer.bindings = {};
                  resp['results'][i]['ConsumeOfferDetails']['offer']['bindings'] = resp['results'][i]['ConsumeOfferDetails']['offer']['bindings'] || {};
                  for (let k in resp['results'][i]['ConsumeOfferDetails']['offer']['bindings']) {
                    result.results[i].consumeofferdetails.offer.bindings[k] = resp['results'][i]['ConsumeOfferDetails']['offer']['bindings'][k];
                  }
                  result.results[i].consumeofferdetails.offer.users = [];
                  resp['results'][i]['ConsumeOfferDetails']['offer']['users'] = resp['results'][i]['ConsumeOfferDetails']['offer']['users'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['ConsumeOfferDetails']['offer']['users'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#OfferUserDetails
                    if (resp['results'][i]['ConsumeOfferDetails']['offer']['users'][i2]) {
                      result.results[i].consumeofferdetails.offer.users[i2] = {};
                      result.results[i].consumeofferdetails.offer.users[i2].user = resp['results'][i]['ConsumeOfferDetails']['offer']['users'][i2]['user'];
                      result.results[i].consumeofferdetails.offer.users[i2].displayName = resp['results'][i]['ConsumeOfferDetails']['offer']['users'][i2]['display-name'];
                      result.results[i].consumeofferdetails.offer.users[i2].access = resp['results'][i]['ConsumeOfferDetails']['offer']['users'][i2]['access'];
                    }
                  }
                }
                // gopkg.in/macaroon.v2-unstable#Macaroon
                result.results[i].consumeofferdetails.macaroon = resp['results'][i]['ConsumeOfferDetails']['macaroon'];
                // github.com/juju/juju/apiserver/params#ExternalControllerInfo
                if (resp['results'][i]['ConsumeOfferDetails']['external-controller']) {
                  result.results[i].consumeofferdetails.externalController = {};
                  result.results[i].consumeofferdetails.externalController.controllerTag = resp['results'][i]['ConsumeOfferDetails']['external-controller']['controller-tag'];
                  result.results[i].consumeofferdetails.externalController.controllerAlias = resp['results'][i]['ConsumeOfferDetails']['external-controller']['controller-alias'];
                  result.results[i].consumeofferdetails.externalController.addrs = [];
                  resp['results'][i]['ConsumeOfferDetails']['external-controller']['addrs'] = resp['results'][i]['ConsumeOfferDetails']['external-controller']['addrs'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['ConsumeOfferDetails']['external-controller']['addrs'].length; i2++) {
                    result.results[i].consumeofferdetails.externalController.addrs[i2] = resp['results'][i]['ConsumeOfferDetails']['external-controller']['addrs'][i2];
                  }
                  result.results[i].consumeofferdetails.externalController.caCert = resp['results'][i]['ConsumeOfferDetails']['external-controller']['ca-cert'];
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListApplicationOffers gets deployed details about application offers that
    match given filter. The results contain details about the deployed
    applications such as connection count.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          filters: []{
            ownerName: string,
            modelName: string,
            offerName: string,
            applicationName: string,
            applicationDescription: string,
            applicationUser: string,
            endpoints: []{
              role: string,
              interface: string,
              name: string
            },
            connectedUsers: []string,
            allowedUsers: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            applicationofferdetails: {
              sourceModelTag: string,
              offerUuid: string,
              offerUrl: string,
              offerName: string,
              applicationDescription: string,
              endpoints: []{
                name: string,
                role: string,
                interface: string,
                limit: int
              },
              spaces: []{
                cloudType: string,
                name: string,
                providerId: string,
                providerAttributes: map[string]anything,
                subnets: []{
                  cidr: string,
                  providerId: string,
                  providerNetworkId: string,
                  providerSpaceId: string,
                  vlanTag: int,
                  life: string,
                  spaceTag: string,
                  zones: []string,
                  status: string
                }
              },
              bindings: map[string]string,
              users: []{
                user: string,
                displayName: string,
                access: string
              }
            },
            applicationName: string,
            charmUrl: string,
            connections: []{
              sourceModelTag: string,
              relationId: int,
              username: string,
              endpoint: string,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              ingressSubnets: []string
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listApplicationOffers(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#OfferFilters
      if (args) {
        params = {};
        params['Filters'] = [];
        args.filters = args.filters || [];
        for (let i = 0; i < args.filters.length; i++) {
          // github.com/juju/juju/apiserver/params#OfferFilter
          if (args.filters[i]) {
            params['Filters'][i] = {};
            params['Filters'][i]['owner-name'] = args.filters[i].ownerName;
            params['Filters'][i]['model-name'] = args.filters[i].modelName;
            params['Filters'][i]['offer-name'] = args.filters[i].offerName;
            params['Filters'][i]['application-name'] = args.filters[i].applicationName;
            params['Filters'][i]['application-description'] = args.filters[i].applicationDescription;
            params['Filters'][i]['application-user'] = args.filters[i].applicationUser;
            params['Filters'][i]['endpoints'] = [];
            args.filters[i].endpoints = args.filters[i].endpoints || [];
            for (let i2 = 0; i2 < args.filters[i].endpoints.length; i2++) {
              // github.com/juju/juju/apiserver/params#EndpointFilterAttributes
              if (args.filters[i].endpoints[i2]) {
                params['Filters'][i]['endpoints'][i2] = {};
                // gopkg.in/juju/charm.v6#RelationRole
                params['Filters'][i]['endpoints'][i2]['role'] = args.filters[i].endpoints[i2].role;
                params['Filters'][i]['endpoints'][i2]['interface'] = args.filters[i].endpoints[i2].interface;
                params['Filters'][i]['endpoints'][i2]['name'] = args.filters[i].endpoints[i2].name;
              }
            }
            params['Filters'][i]['connected-users'] = [];
            args.filters[i].connectedUsers = args.filters[i].connectedUsers || [];
            for (let i2 = 0; i2 < args.filters[i].connectedUsers.length; i2++) {
              params['Filters'][i]['connected-users'][i2] = args.filters[i].connectedUsers[i2];
            }
            params['Filters'][i]['allowed-users'] = [];
            args.filters[i].allowedUsers = args.filters[i].allowedUsers || [];
            for (let i2 = 0; i2 < args.filters[i].allowedUsers.length; i2++) {
              params['Filters'][i]['allowed-users'][i2] = args.filters[i].allowedUsers[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'ListApplicationOffers',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#QueryApplicationOffersResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ApplicationOfferAdminDetails
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ApplicationOfferDetails
              if (resp['results'][i]['ApplicationOfferDetails']) {
                result.results[i].applicationofferdetails = {};
                result.results[i].applicationofferdetails.sourceModelTag = resp['results'][i]['ApplicationOfferDetails']['source-model-tag'];
                result.results[i].applicationofferdetails.offerUuid = resp['results'][i]['ApplicationOfferDetails']['offer-uuid'];
                result.results[i].applicationofferdetails.offerUrl = resp['results'][i]['ApplicationOfferDetails']['offer-url'];
                result.results[i].applicationofferdetails.offerName = resp['results'][i]['ApplicationOfferDetails']['offer-name'];
                result.results[i].applicationofferdetails.applicationDescription = resp['results'][i]['ApplicationOfferDetails']['application-description'];
                result.results[i].applicationofferdetails.endpoints = [];
                resp['results'][i]['ApplicationOfferDetails']['endpoints'] = resp['results'][i]['ApplicationOfferDetails']['endpoints'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['ApplicationOfferDetails']['endpoints'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#RemoteEndpoint
                  if (resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]) {
                    result.results[i].applicationofferdetails.endpoints[i2] = {};
                    result.results[i].applicationofferdetails.endpoints[i2].name = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['name'];
                    // gopkg.in/juju/charm.v6#RelationRole
                    result.results[i].applicationofferdetails.endpoints[i2].role = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['role'];
                    result.results[i].applicationofferdetails.endpoints[i2].interface = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['interface'];
                    result.results[i].applicationofferdetails.endpoints[i2].limit = resp['results'][i]['ApplicationOfferDetails']['endpoints'][i2]['limit'];
                  }
                }
                result.results[i].applicationofferdetails.spaces = [];
                resp['results'][i]['ApplicationOfferDetails']['spaces'] = resp['results'][i]['ApplicationOfferDetails']['spaces'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['ApplicationOfferDetails']['spaces'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#RemoteSpace
                  if (resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]) {
                    result.results[i].applicationofferdetails.spaces[i2] = {};
                    result.results[i].applicationofferdetails.spaces[i2].cloudType = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['cloud-type'];
                    result.results[i].applicationofferdetails.spaces[i2].name = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['name'];
                    result.results[i].applicationofferdetails.spaces[i2].providerId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-id'];
                    result.results[i].applicationofferdetails.spaces[i2].providerAttributes = {};
                    resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'] || {};
                    for (let k in resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes']) {
                      result.results[i].applicationofferdetails.spaces[i2].providerAttributes[k] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['provider-attributes'][k];
                    }
                    result.results[i].applicationofferdetails.spaces[i2].subnets = [];
                    resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'] || [];
                    for (let i3 = 0; i3 < resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'].length; i3++) {
                      // github.com/juju/juju/apiserver/params#Subnet
                      if (resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]) {
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3] = {};
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].cidr = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['cidr'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].providerId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-id'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].providerNetworkId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-network-id'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].providerSpaceId = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['provider-space-id'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].vlanTag = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['vlan-tag'];
                        // github.com/juju/juju/apiserver/params#Life
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].life = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['life'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].spaceTag = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['space-tag'];
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].zones = [];
                        resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'] || [];
                        for (let i4 = 0; i4 < resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'].length; i4++) {
                          result.results[i].applicationofferdetails.spaces[i2].subnets[i3].zones[i4] = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['zones'][i4];
                        }
                        result.results[i].applicationofferdetails.spaces[i2].subnets[i3].status = resp['results'][i]['ApplicationOfferDetails']['spaces'][i2]['subnets'][i3]['status'];
                      }
                    }
                  }
                }
                result.results[i].applicationofferdetails.bindings = {};
                resp['results'][i]['ApplicationOfferDetails']['bindings'] = resp['results'][i]['ApplicationOfferDetails']['bindings'] || {};
                for (let k in resp['results'][i]['ApplicationOfferDetails']['bindings']) {
                  result.results[i].applicationofferdetails.bindings[k] = resp['results'][i]['ApplicationOfferDetails']['bindings'][k];
                }
                result.results[i].applicationofferdetails.users = [];
                resp['results'][i]['ApplicationOfferDetails']['users'] = resp['results'][i]['ApplicationOfferDetails']['users'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['ApplicationOfferDetails']['users'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#OfferUserDetails
                  if (resp['results'][i]['ApplicationOfferDetails']['users'][i2]) {
                    result.results[i].applicationofferdetails.users[i2] = {};
                    result.results[i].applicationofferdetails.users[i2].user = resp['results'][i]['ApplicationOfferDetails']['users'][i2]['user'];
                    result.results[i].applicationofferdetails.users[i2].displayName = resp['results'][i]['ApplicationOfferDetails']['users'][i2]['display-name'];
                    result.results[i].applicationofferdetails.users[i2].access = resp['results'][i]['ApplicationOfferDetails']['users'][i2]['access'];
                  }
                }
              }
              result.results[i].applicationName = resp['results'][i]['application-name'];
              result.results[i].charmUrl = resp['results'][i]['charm-url'];
              result.results[i].connections = [];
              resp['results'][i]['connections'] = resp['results'][i]['connections'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['connections'].length; i2++) {
                // github.com/juju/juju/apiserver/params#OfferConnection
                if (resp['results'][i]['connections'][i2]) {
                  result.results[i].connections[i2] = {};
                  result.results[i].connections[i2].sourceModelTag = resp['results'][i]['connections'][i2]['source-model-tag'];
                  result.results[i].connections[i2].relationId = resp['results'][i]['connections'][i2]['relation-id'];
                  result.results[i].connections[i2].username = resp['results'][i]['connections'][i2]['username'];
                  result.results[i].connections[i2].endpoint = resp['results'][i]['connections'][i2]['endpoint'];
                  // github.com/juju/juju/apiserver/params#EntityStatus
                  if (resp['results'][i]['connections'][i2]['status']) {
                    result.results[i].connections[i2].status = {};
                    // github.com/juju/juju/core/status#Status
                    result.results[i].connections[i2].status.status = resp['results'][i]['connections'][i2]['status']['status'];
                    result.results[i].connections[i2].status.info = resp['results'][i]['connections'][i2]['status']['info'];
                    result.results[i].connections[i2].status.data = {};
                    resp['results'][i]['connections'][i2]['status']['data'] = resp['results'][i]['connections'][i2]['status']['data'] || {};
                    for (let k in resp['results'][i]['connections'][i2]['status']['data']) {
                      result.results[i].connections[i2].status.data[k] = resp['results'][i]['connections'][i2]['status']['data'][k];
                    }
                    // time#Time
                    result.results[i].connections[i2].status.since = resp['results'][i]['connections'][i2]['status']['since'];
                  }
                  result.results[i].connections[i2].ingressSubnets = [];
                  resp['results'][i]['connections'][i2]['ingress-subnets'] = resp['results'][i]['connections'][i2]['ingress-subnets'] || [];
                  for (let i3 = 0; i3 < resp['results'][i]['connections'][i2]['ingress-subnets'].length; i3++) {
                    result.results[i].connections[i2].ingressSubnets[i3] = resp['results'][i]['connections'][i2]['ingress-subnets'][i3];
                  }
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ModifyOfferAccess changes the application offer access granted to users.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          changes: []{
            userTag: string,
            action: string,
            access: string,
            offerUrl: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  modifyOfferAccess(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ModifyOfferAccessRequest
      if (args) {
        params = {};
        params['changes'] = [];
        args.changes = args.changes || [];
        for (let i = 0; i < args.changes.length; i++) {
          // github.com/juju/juju/apiserver/params#ModifyOfferAccess
          if (args.changes[i]) {
            params['changes'][i] = {};
            params['changes'][i]['user-tag'] = args.changes[i].userTag;
            // github.com/juju/juju/apiserver/params#OfferAction
            params['changes'][i]['action'] = args.changes[i].action;
            // github.com/juju/juju/apiserver/params#OfferAccessPermission
            params['changes'][i]['access'] = args.changes[i].access;
            params['changes'][i]['offer-url'] = args.changes[i].offerUrl;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'ModifyOfferAccess',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Offer makes application endpoints available for consumption at a specified
    URL.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          offers: []{
            modelTag: string,
            offerName: string,
            applicationName: string,
            applicationDescription: string,
            endpoints: map[string]string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  offer(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#AddApplicationOffers
      if (args) {
        params = {};
        params['Offers'] = [];
        args.offers = args.offers || [];
        for (let i = 0; i < args.offers.length; i++) {
          // github.com/juju/juju/apiserver/params#AddApplicationOffer
          if (args.offers[i]) {
            params['Offers'][i] = {};
            params['Offers'][i]['model-tag'] = args.offers[i].modelTag;
            params['Offers'][i]['offer-name'] = args.offers[i].offerName;
            params['Offers'][i]['application-name'] = args.offers[i].applicationName;
            params['Offers'][i]['application-description'] = args.offers[i].applicationDescription;
            params['Offers'][i]['endpoints'] = {};
            args.offers[i].endpoints = args.offers[i].endpoints || {};
            for (let k in args.offers[i].endpoints) {
              params['Offers'][i]['endpoints'][k] = args.offers[i].endpoints[k];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'Offer',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    RemoteApplicationInfo returns information about the requested remote
    application.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          offerUrls: []string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              modelTag: string,
              name: string,
              description: string,
              offerUrl: string,
              sourceModelLabel: string,
              endpoints: []{
                name: string,
                role: string,
                interface: string,
                limit: int
              },
              iconUrlPath: string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  remoteApplicationInfo(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#OfferURLs
      if (args) {
        params = {};
        params['offer-urls'] = [];
        args.offerUrls = args.offerUrls || [];
        for (let i = 0; i < args.offerUrls.length; i++) {
          params['offer-urls'][i] = args.offerUrls[i];
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ApplicationOffers',
        request: 'RemoteApplicationInfo',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#RemoteApplicationInfoResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#RemoteApplicationInfoResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#RemoteApplicationInfo
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                result.results[i].result.modelTag = resp['results'][i]['result']['model-tag'];
                result.results[i].result.name = resp['results'][i]['result']['name'];
                result.results[i].result.description = resp['results'][i]['result']['description'];
                result.results[i].result.offerUrl = resp['results'][i]['result']['offer-url'];
                result.results[i].result.sourceModelLabel = resp['results'][i]['result']['source-model-label'];
                result.results[i].result.endpoints = [];
                resp['results'][i]['result']['endpoints'] = resp['results'][i]['result']['endpoints'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['endpoints'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#RemoteEndpoint
                  if (resp['results'][i]['result']['endpoints'][i2]) {
                    result.results[i].result.endpoints[i2] = {};
                    result.results[i].result.endpoints[i2].name = resp['results'][i]['result']['endpoints'][i2]['name'];
                    // gopkg.in/juju/charm.v6#RelationRole
                    result.results[i].result.endpoints[i2].role = resp['results'][i]['result']['endpoints'][i2]['role'];
                    result.results[i].result.endpoints[i2].interface = resp['results'][i]['result']['endpoints'][i2]['interface'];
                    result.results[i].result.endpoints[i2].limit = resp['results'][i]['result']['endpoints'][i2]['limit'];
                  }
                }
                result.results[i].result.iconUrlPath = resp['results'][i]['result']['icon-url-path'];
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapApplicationOffers) {
  // Decorate the facade class in order to improve user experience.
  ApplicationOffersV1 = wrappers.wrapApplicationOffers(ApplicationOffersV1);
}

module.exports = ApplicationOffersV1;