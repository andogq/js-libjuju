/**
  Juju CrossModelRelations version 1.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Tue 2018/11/27 16:23:14 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  CrossModelRelationsAPI provides access to the CrossModelRelations API facade.
*/
class CrossModelRelationsV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    PublishIngressNetworkChanges publishes changes to the required ingress
    addresses to the model hosting the offer in the relation.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          changes: []{
            relationToken: string,
            applicationToken: string,
            networks: []string,
            ingressRequired: bool,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  publishIngressNetworkChanges(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#IngressNetworksChanges
      if (args) {
        params = {};
        params['changes'] = [];
        args.changes = args.changes || [];
        for (let i = 0; i < args.changes.length; i++) {
          // github.com/juju/juju/apiserver/params#IngressNetworksChangeEvent
          if (args.changes[i]) {
            params['changes'][i] = {};
            params['changes'][i]['relation-token'] = args.changes[i].relationToken;
            params['changes'][i]['application-token'] = args.changes[i].applicationToken;
            params['changes'][i]['networks'] = [];
            args.changes[i].networks = args.changes[i].networks || [];
            for (let i2 = 0; i2 < args.changes[i].networks.length; i2++) {
              params['changes'][i]['networks'][i2] = args.changes[i].networks[i2];
            }
            params['changes'][i]['ingress-required'] = args.changes[i].ingressRequired;
            // gopkg.in/macaroon.v2-unstable#Slice
            params['changes'][i]['macaroons'] = [];
            args.changes[i].macaroons = args.changes[i].macaroons || [];
            for (let i2 = 0; i2 < args.changes[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['changes'][i]['macaroons'][i2] = args.changes[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'PublishIngressNetworkChanges',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    PublishRelationChanges publishes relation changes to the model hosting the
    remote application involved in the relation.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          changes: []{
            relationToken: string,
            applicationToken: string,
            life: string,
            forceCleanup: bool,
            suspended: bool,
            suspendedReason: string,
            changedUnits: []{
              unitId: int,
              settings: map[string]anything
            },
            departedUnits: []int,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  publishRelationChanges(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#RemoteRelationsChanges
      if (args) {
        params = {};
        params['changes'] = [];
        args.changes = args.changes || [];
        for (let i = 0; i < args.changes.length; i++) {
          // github.com/juju/juju/apiserver/params#RemoteRelationChangeEvent
          if (args.changes[i]) {
            params['changes'][i] = {};
            params['changes'][i]['relation-token'] = args.changes[i].relationToken;
            params['changes'][i]['application-token'] = args.changes[i].applicationToken;
            // github.com/juju/juju/apiserver/params#Life
            params['changes'][i]['life'] = args.changes[i].life;
            params['changes'][i]['force-cleanup'] = args.changes[i].forceCleanup;
            params['changes'][i]['suspended'] = args.changes[i].suspended;
            params['changes'][i]['suspended-reason'] = args.changes[i].suspendedReason;
            params['changes'][i]['changed-units'] = [];
            args.changes[i].changedUnits = args.changes[i].changedUnits || [];
            for (let i2 = 0; i2 < args.changes[i].changedUnits.length; i2++) {
              // github.com/juju/juju/apiserver/params#RemoteRelationUnitChange
              if (args.changes[i].changedUnits[i2]) {
                params['changes'][i]['changed-units'][i2] = {};
                params['changes'][i]['changed-units'][i2]['unit-id'] = args.changes[i].changedUnits[i2].unitId;
                params['changes'][i]['changed-units'][i2]['settings'] = {};
                args.changes[i].changedUnits[i2].settings = args.changes[i].changedUnits[i2].settings || {};
                for (let k in args.changes[i].changedUnits[i2].settings) {
                  params['changes'][i]['changed-units'][i2]['settings'][k] = args.changes[i].changedUnits[i2].settings[k];
                }
              }
            }
            params['changes'][i]['departed-units'] = [];
            args.changes[i].departedUnits = args.changes[i].departedUnits || [];
            for (let i2 = 0; i2 < args.changes[i].departedUnits.length; i2++) {
              params['changes'][i]['departed-units'][i2] = args.changes[i].departedUnits[i2];
            }
            // gopkg.in/macaroon.v2-unstable#Slice
            params['changes'][i]['macaroons'] = [];
            args.changes[i].macaroons = args.changes[i].macaroons || [];
            for (let i2 = 0; i2 < args.changes[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['changes'][i]['macaroons'][i2] = args.changes[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'PublishRelationChanges',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    RegisterRemoteRelationArgs sets up the model to participate in the
    specified relations. This operation is idempotent.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          relations: []{
            applicationToken: string,
            sourceModelTag: string,
            relationToken: string,
            remoteEndpoint: {
              name: string,
              role: string,
              interface: string,
              limit: int
            },
            remoteSpace: {
              cloudType: string,
              name: string,
              providerId: string,
              providerAttributes: map[string]anything,
              subnets: []{
                cidr: string,
                providerId: string,
                providerNetworkId: string,
                providerSpaceId: string,
                vlanTag: int,
                life: string,
                spaceTag: string,
                zones: []string,
                status: string
              }
            },
            offerUuid: string,
            localEndpointName: string,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              relationToken: string,
              macaroon: anything
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  registerRemoteRelations(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#RegisterRemoteRelationArgs
      if (args) {
        params = {};
        params['relations'] = [];
        args.relations = args.relations || [];
        for (let i = 0; i < args.relations.length; i++) {
          // github.com/juju/juju/apiserver/params#RegisterRemoteRelationArg
          if (args.relations[i]) {
            params['relations'][i] = {};
            params['relations'][i]['application-token'] = args.relations[i].applicationToken;
            params['relations'][i]['source-model-tag'] = args.relations[i].sourceModelTag;
            params['relations'][i]['relation-token'] = args.relations[i].relationToken;
            // github.com/juju/juju/apiserver/params#RemoteEndpoint
            if (args.relations[i].remoteEndpoint) {
              params['relations'][i]['remote-endpoint'] = {};
              params['relations'][i]['remote-endpoint']['name'] = args.relations[i].remoteEndpoint.name;
              // gopkg.in/juju/charm.v6#RelationRole
              params['relations'][i]['remote-endpoint']['role'] = args.relations[i].remoteEndpoint.role;
              params['relations'][i]['remote-endpoint']['interface'] = args.relations[i].remoteEndpoint.interface;
              params['relations'][i]['remote-endpoint']['limit'] = args.relations[i].remoteEndpoint.limit;
            }
            // github.com/juju/juju/apiserver/params#RemoteSpace
            if (args.relations[i].remoteSpace) {
              params['relations'][i]['remote-space'] = {};
              params['relations'][i]['remote-space']['cloud-type'] = args.relations[i].remoteSpace.cloudType;
              params['relations'][i]['remote-space']['name'] = args.relations[i].remoteSpace.name;
              params['relations'][i]['remote-space']['provider-id'] = args.relations[i].remoteSpace.providerId;
              params['relations'][i]['remote-space']['provider-attributes'] = {};
              args.relations[i].remoteSpace.providerAttributes = args.relations[i].remoteSpace.providerAttributes || {};
              for (let k in args.relations[i].remoteSpace.providerAttributes) {
                params['relations'][i]['remote-space']['provider-attributes'][k] = args.relations[i].remoteSpace.providerAttributes[k];
              }
              params['relations'][i]['remote-space']['subnets'] = [];
              args.relations[i].remoteSpace.subnets = args.relations[i].remoteSpace.subnets || [];
              for (let i2 = 0; i2 < args.relations[i].remoteSpace.subnets.length; i2++) {
                // github.com/juju/juju/apiserver/params#Subnet
                if (args.relations[i].remoteSpace.subnets[i2]) {
                  params['relations'][i]['remote-space']['subnets'][i2] = {};
                  params['relations'][i]['remote-space']['subnets'][i2]['cidr'] = args.relations[i].remoteSpace.subnets[i2].cidr;
                  params['relations'][i]['remote-space']['subnets'][i2]['provider-id'] = args.relations[i].remoteSpace.subnets[i2].providerId;
                  params['relations'][i]['remote-space']['subnets'][i2]['provider-network-id'] = args.relations[i].remoteSpace.subnets[i2].providerNetworkId;
                  params['relations'][i]['remote-space']['subnets'][i2]['provider-space-id'] = args.relations[i].remoteSpace.subnets[i2].providerSpaceId;
                  params['relations'][i]['remote-space']['subnets'][i2]['vlan-tag'] = args.relations[i].remoteSpace.subnets[i2].vlanTag;
                  // github.com/juju/juju/apiserver/params#Life
                  params['relations'][i]['remote-space']['subnets'][i2]['life'] = args.relations[i].remoteSpace.subnets[i2].life;
                  params['relations'][i]['remote-space']['subnets'][i2]['space-tag'] = args.relations[i].remoteSpace.subnets[i2].spaceTag;
                  params['relations'][i]['remote-space']['subnets'][i2]['zones'] = [];
                  args.relations[i].remoteSpace.subnets[i2].zones = args.relations[i].remoteSpace.subnets[i2].zones || [];
                  for (let i3 = 0; i3 < args.relations[i].remoteSpace.subnets[i2].zones.length; i3++) {
                    params['relations'][i]['remote-space']['subnets'][i2]['zones'][i3] = args.relations[i].remoteSpace.subnets[i2].zones[i3];
                  }
                  params['relations'][i]['remote-space']['subnets'][i2]['status'] = args.relations[i].remoteSpace.subnets[i2].status;
                }
              }
            }
            params['relations'][i]['offer-uuid'] = args.relations[i].offerUuid;
            params['relations'][i]['local-endpoint-name'] = args.relations[i].localEndpointName;
            // gopkg.in/macaroon.v2-unstable#Slice
            params['relations'][i]['macaroons'] = [];
            args.relations[i].macaroons = args.relations[i].macaroons || [];
            for (let i2 = 0; i2 < args.relations[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['relations'][i]['macaroons'][i2] = args.relations[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'RegisterRemoteRelations',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#RegisterRemoteRelationResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#RegisterRemoteRelationResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#RemoteRelationDetails
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                result.results[i].result.relationToken = resp['results'][i]['result']['relation-token'];
                // gopkg.in/macaroon.v2-unstable#Macaroon
                result.results[i].result.macaroon = resp['results'][i]['result']['macaroon'];
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    RelationUnitSettings returns the relation unit settings for the given
    relation units.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          relationUnits: []{
            relationToken: string,
            unit: string,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            },
            settings: map[string]string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  relationUnitSettings(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#RemoteRelationUnits
      if (args) {
        params = {};
        params['relation-units'] = [];
        args.relationUnits = args.relationUnits || [];
        for (let i = 0; i < args.relationUnits.length; i++) {
          // github.com/juju/juju/apiserver/params#RemoteRelationUnit
          if (args.relationUnits[i]) {
            params['relation-units'][i] = {};
            params['relation-units'][i]['relation-token'] = args.relationUnits[i].relationToken;
            params['relation-units'][i]['unit'] = args.relationUnits[i].unit;
            // gopkg.in/macaroon.v2-unstable#Slice
            params['relation-units'][i]['macaroons'] = [];
            args.relationUnits[i].macaroons = args.relationUnits[i].macaroons || [];
            for (let i2 = 0; i2 < args.relationUnits[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['relation-units'][i]['macaroons'][i2] = args.relationUnits[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'RelationUnitSettings',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#SettingsResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#SettingsResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
              // github.com/juju/juju/apiserver/params#Settings
              result.results[i].settings = {};
              resp['results'][i]['settings'] = resp['results'][i]['settings'] || {};
              for (let k in resp['results'][i]['settings']) {
                result.results[i].settings[k] = resp['results'][i]['settings'][k];
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    WatchEgressAddressesForRelations creates a watcher that notifies when
    addresses, from which connections will originate for the relation,
    change. Each event contains the entire set of addresses which are
    required for ingress for the relation.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          args: []{
            relationToken: string,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            watcherId: string,
            changes: []string,
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  watchEgressAddressesForRelations(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#RemoteEntityArgs
      if (args) {
        params = {};
        params['args'] = [];
        args.args = args.args || [];
        for (let i = 0; i < args.args.length; i++) {
          // github.com/juju/juju/apiserver/params#RemoteEntityArg
          if (args.args[i]) {
            params['args'][i] = {};
            params['args'][i]['relation-token'] = args.args[i].relationToken;
            // gopkg.in/macaroon.v2-unstable#Slice
            params['args'][i]['macaroons'] = [];
            args.args[i].macaroons = args.args[i].macaroons || [];
            for (let i2 = 0; i2 < args.args[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['args'][i]['macaroons'][i2] = args.args[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'WatchEgressAddressesForRelations',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#StringsWatchResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#StringsWatchResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].watcherId = resp['results'][i]['watcher-id'];
              result.results[i].changes = [];
              resp['results'][i]['changes'] = resp['results'][i]['changes'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['changes'].length; i2++) {
                result.results[i].changes[i2] = resp['results'][i]['changes'][i2];
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    WatchOfferStatus starts an OfferStatusWatcher for watching the status of an
    offer.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          args: []{
            offerUuid: string,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            watcherId: string,
            changes: []{
              offerName: string,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  watchOfferStatus(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#OfferArgs
      if (args) {
        params = {};
        params['args'] = [];
        args.args = args.args || [];
        for (let i = 0; i < args.args.length; i++) {
          // github.com/juju/juju/apiserver/params#OfferArg
          if (args.args[i]) {
            params['args'][i] = {};
            params['args'][i]['offer-uuid'] = args.args[i].offerUuid;
            // gopkg.in/macaroon.v2-unstable#Slice
            params['args'][i]['macaroons'] = [];
            args.args[i].macaroons = args.args[i].macaroons || [];
            for (let i2 = 0; i2 < args.args[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['args'][i]['macaroons'][i2] = args.args[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'WatchOfferStatus',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#OfferStatusWatchResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#OfferStatusWatchResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].watcherId = resp['results'][i]['watcher-id'];
              result.results[i].changes = [];
              resp['results'][i]['changes'] = resp['results'][i]['changes'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['changes'].length; i2++) {
                // github.com/juju/juju/apiserver/params#OfferStatusChange
                if (resp['results'][i]['changes'][i2]) {
                  result.results[i].changes[i2] = {};
                  result.results[i].changes[i2].offerName = resp['results'][i]['changes'][i2]['offer-name'];
                  // github.com/juju/juju/apiserver/params#EntityStatus
                  if (resp['results'][i]['changes'][i2]['status']) {
                    result.results[i].changes[i2].status = {};
                    // github.com/juju/juju/core/status#Status
                    result.results[i].changes[i2].status.status = resp['results'][i]['changes'][i2]['status']['status'];
                    result.results[i].changes[i2].status.info = resp['results'][i]['changes'][i2]['status']['info'];
                    result.results[i].changes[i2].status.data = {};
                    resp['results'][i]['changes'][i2]['status']['data'] = resp['results'][i]['changes'][i2]['status']['data'] || {};
                    for (let k in resp['results'][i]['changes'][i2]['status']['data']) {
                      result.results[i].changes[i2].status.data[k] = resp['results'][i]['changes'][i2]['status']['data'][k];
                    }
                    // time#Time
                    result.results[i].changes[i2].status.since = resp['results'][i]['changes'][i2]['status']['since'];
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    WatchRelationUnits starts a RelationUnitsWatcher for watching the relation
    units involved in each specified relation, and returns the watcher IDs
    and initial values, or an error if the relation units could not be
    watched.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          args: []{
            relationToken: string,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            watcherId: string,
            changes: {
              changed: map[string]{
                version: int
              },
              departed: []string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  watchRelationUnits(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#RemoteEntityArgs
      if (args) {
        params = {};
        params['args'] = [];
        args.args = args.args || [];
        for (let i = 0; i < args.args.length; i++) {
          // github.com/juju/juju/apiserver/params#RemoteEntityArg
          if (args.args[i]) {
            params['args'][i] = {};
            params['args'][i]['relation-token'] = args.args[i].relationToken;
            // gopkg.in/macaroon.v2-unstable#Slice
            params['args'][i]['macaroons'] = [];
            args.args[i].macaroons = args.args[i].macaroons || [];
            for (let i2 = 0; i2 < args.args[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['args'][i]['macaroons'][i2] = args.args[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'WatchRelationUnits',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#RelationUnitsWatchResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#RelationUnitsWatchResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].watcherId = resp['results'][i]['watcher-id'];
              // github.com/juju/juju/apiserver/params#RelationUnitsChange
              if (resp['results'][i]['changes']) {
                result.results[i].changes = {};
                result.results[i].changes.changed = {};
                resp['results'][i]['changes']['changed'] = resp['results'][i]['changes']['changed'] || {};
                for (let k in resp['results'][i]['changes']['changed']) {
                  // github.com/juju/juju/apiserver/params#UnitSettings
                  if (resp['results'][i]['changes']['changed'][k]) {
                    result.results[i].changes.changed[k] = {};
                    result.results[i].changes.changed[k].version = resp['results'][i]['changes']['changed'][k]['version'];
                  }
                }
                result.results[i].changes.departed = [];
                resp['results'][i]['changes']['departed'] = resp['results'][i]['changes']['departed'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['changes']['departed'].length; i2++) {
                  result.results[i].changes.departed[i2] = resp['results'][i]['changes']['departed'][i2];
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    WatchRelationsSuspendedStatus starts a RelationStatusWatcher for watching
    the life and suspended status of a relation.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          args: []{
            relationToken: string,
            macaroons: []anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            watcherId: string,
            changes: []{
              key: string,
              life: string,
              suspended: bool,
              suspendedReason: string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  watchRelationsSuspendedStatus(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#RemoteEntityArgs
      if (args) {
        params = {};
        params['args'] = [];
        args.args = args.args || [];
        for (let i = 0; i < args.args.length; i++) {
          // github.com/juju/juju/apiserver/params#RemoteEntityArg
          if (args.args[i]) {
            params['args'][i] = {};
            params['args'][i]['relation-token'] = args.args[i].relationToken;
            // gopkg.in/macaroon.v2-unstable#Slice
            params['args'][i]['macaroons'] = [];
            args.args[i].macaroons = args.args[i].macaroons || [];
            for (let i2 = 0; i2 < args.args[i].macaroons.length; i2++) {
              // gopkg.in/macaroon.v2-unstable#Macaroon
              params['args'][i]['macaroons'][i2] = args.args[i].macaroons[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'CrossModelRelations',
        request: 'WatchRelationsSuspendedStatus',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#RelationStatusWatchResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#RelationLifeSuspendedStatusWatchResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].watcherId = resp['results'][i]['watcher-id'];
              result.results[i].changes = [];
              resp['results'][i]['changes'] = resp['results'][i]['changes'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['changes'].length; i2++) {
                // github.com/juju/juju/apiserver/params#RelationLifeSuspendedStatusChange
                if (resp['results'][i]['changes'][i2]) {
                  result.results[i].changes[i2] = {};
                  result.results[i].changes[i2].key = resp['results'][i]['changes'][i2]['key'];
                  // github.com/juju/juju/apiserver/params#Life
                  result.results[i].changes[i2].life = resp['results'][i]['changes'][i2]['life'];
                  result.results[i].changes[i2].suspended = resp['results'][i]['changes'][i2]['suspended'];
                  result.results[i].changes[i2].suspendedReason = resp['results'][i]['changes'][i2]['suspended-reason'];
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapCrossModelRelations) {
  // Decorate the facade class in order to improve user experience.
  CrossModelRelationsV1 = wrappers.wrapCrossModelRelations(CrossModelRelationsV1);
}

module.exports = CrossModelRelationsV1;