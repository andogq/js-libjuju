/**
  Juju Cloud version 2.
  This API facade is available on controller connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Tue 2018/11/27 16:23:14 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  CloudAPIV2 provides a way to wrap the different calls between version 2 and
  version 3 of the cloud API.
*/
class CloudV2 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 2;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    AddCloud adds a new cloud, different from the one managed by the
    controller.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          cloud: {
            type: string,
            authTypes: []string,
            endpoint: string,
            identityEndpoint: string,
            storageEndpoint: string,
            regions: []{
              name: string,
              endpoint: string,
              identityEndpoint: string,
              storageEndpoint: string
            },
            caCertificates: []string
          },
          name: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  addCloud(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#AddCloudArgs
      if (args) {
        params = {};
        // github.com/juju/juju/apiserver/params#Cloud
        if (args.cloud) {
          params['cloud'] = {};
          params['cloud']['type'] = args.cloud.type;
          params['cloud']['auth-types'] = [];
          args.cloud.authTypes = args.cloud.authTypes || [];
          for (let i = 0; i < args.cloud.authTypes.length; i++) {
            params['cloud']['auth-types'][i] = args.cloud.authTypes[i];
          }
          params['cloud']['endpoint'] = args.cloud.endpoint;
          params['cloud']['identity-endpoint'] = args.cloud.identityEndpoint;
          params['cloud']['storage-endpoint'] = args.cloud.storageEndpoint;
          params['cloud']['regions'] = [];
          args.cloud.regions = args.cloud.regions || [];
          for (let i = 0; i < args.cloud.regions.length; i++) {
            // github.com/juju/juju/apiserver/params#CloudRegion
            if (args.cloud.regions[i]) {
              params['cloud']['regions'][i] = {};
              params['cloud']['regions'][i]['name'] = args.cloud.regions[i].name;
              params['cloud']['regions'][i]['endpoint'] = args.cloud.regions[i].endpoint;
              params['cloud']['regions'][i]['identity-endpoint'] = args.cloud.regions[i].identityEndpoint;
              params['cloud']['regions'][i]['storage-endpoint'] = args.cloud.regions[i].storageEndpoint;
            }
          }
          params['cloud']['ca-certificates'] = [];
          args.cloud.caCertificates = args.cloud.caCertificates || [];
          for (let i = 0; i < args.cloud.caCertificates.length; i++) {
            params['cloud']['ca-certificates'][i] = args.cloud.caCertificates[i];
          }
        }
        params['name'] = args.name;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'AddCloud',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    AddCredentials adds new credentials. In contrast to UpdateCredentials()
    below, the new credentials can be for a cloud that the controller does
    not manage (this is required for CAAS models)

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          credentials: []{
            tag: string,
            credential: {
              authType: string,
              attrs: map[string]string,
              redacted: []string
            }
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  addCredentials(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#TaggedCredentials
      if (args) {
        params = {};
        params['credentials'] = [];
        args.credentials = args.credentials || [];
        for (let i = 0; i < args.credentials.length; i++) {
          // github.com/juju/juju/apiserver/params#TaggedCredential
          if (args.credentials[i]) {
            params['credentials'][i] = {};
            params['credentials'][i]['tag'] = args.credentials[i].tag;
            // github.com/juju/juju/apiserver/params#CloudCredential
            if (args.credentials[i].credential) {
              params['credentials'][i]['credential'] = {};
              params['credentials'][i]['credential']['auth-type'] = args.credentials[i].credential.authType;
              params['credentials'][i]['credential']['attrs'] = {};
              args.credentials[i].credential.attrs = args.credentials[i].credential.attrs || {};
              for (let k in args.credentials[i].credential.attrs) {
                params['credentials'][i]['credential']['attrs'][k] = args.credentials[i].credential.attrs[k];
              }
              params['credentials'][i]['credential']['redacted'] = [];
              args.credentials[i].credential.redacted = args.credentials[i].credential.redacted || [];
              for (let i2 = 0; i2 < args.credentials[i].credential.redacted.length; i2++) {
                params['credentials'][i]['credential']['redacted'][i2] = args.credentials[i].credential.redacted[i2];
              }
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'AddCredentials',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Cloud returns the cloud definitions for the specified clouds.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            cloud: {
              type: string,
              authTypes: []string,
              endpoint: string,
              identityEndpoint: string,
              storageEndpoint: string,
              regions: []{
                name: string,
                endpoint: string,
                identityEndpoint: string,
                storageEndpoint: string
              },
              caCertificates: []string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  cloud(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'Cloud',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#CloudResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#CloudResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Cloud
              if (resp['results'][i]['cloud']) {
                result.results[i].cloud = {};
                result.results[i].cloud.type = resp['results'][i]['cloud']['type'];
                result.results[i].cloud.authTypes = [];
                resp['results'][i]['cloud']['auth-types'] = resp['results'][i]['cloud']['auth-types'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['cloud']['auth-types'].length; i2++) {
                  result.results[i].cloud.authTypes[i2] = resp['results'][i]['cloud']['auth-types'][i2];
                }
                result.results[i].cloud.endpoint = resp['results'][i]['cloud']['endpoint'];
                result.results[i].cloud.identityEndpoint = resp['results'][i]['cloud']['identity-endpoint'];
                result.results[i].cloud.storageEndpoint = resp['results'][i]['cloud']['storage-endpoint'];
                result.results[i].cloud.regions = [];
                resp['results'][i]['cloud']['regions'] = resp['results'][i]['cloud']['regions'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['cloud']['regions'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#CloudRegion
                  if (resp['results'][i]['cloud']['regions'][i2]) {
                    result.results[i].cloud.regions[i2] = {};
                    result.results[i].cloud.regions[i2].name = resp['results'][i]['cloud']['regions'][i2]['name'];
                    result.results[i].cloud.regions[i2].endpoint = resp['results'][i]['cloud']['regions'][i2]['endpoint'];
                    result.results[i].cloud.regions[i2].identityEndpoint = resp['results'][i]['cloud']['regions'][i2]['identity-endpoint'];
                    result.results[i].cloud.regions[i2].storageEndpoint = resp['results'][i]['cloud']['regions'][i2]['storage-endpoint'];
                  }
                }
                result.results[i].cloud.caCertificates = [];
                resp['results'][i]['cloud']['ca-certificates'] = resp['results'][i]['cloud']['ca-certificates'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['cloud']['ca-certificates'].length; i2++) {
                  result.results[i].cloud.caCertificates[i2] = resp['results'][i]['cloud']['ca-certificates'][i2];
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    CloudInfo returns information about the specified clouds.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              clouddetails: {
                type: string,
                authTypes: []string,
                endpoint: string,
                identityEndpoint: string,
                storageEndpoint: string,
                regions: []{
                  name: string,
                  endpoint: string,
                  identityEndpoint: string,
                  storageEndpoint: string
                }
              },
              users: []{
                user: string,
                displayName: string,
                access: string
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  cloudInfo(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'CloudInfo',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#CloudInfoResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#CloudInfoResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#CloudInfo
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                // github.com/juju/juju/apiserver/params#CloudDetails
                if (resp['results'][i]['result']['CloudDetails']) {
                  result.results[i].result.clouddetails = {};
                  result.results[i].result.clouddetails.type = resp['results'][i]['result']['CloudDetails']['type'];
                  result.results[i].result.clouddetails.authTypes = [];
                  resp['results'][i]['result']['CloudDetails']['auth-types'] = resp['results'][i]['result']['CloudDetails']['auth-types'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['result']['CloudDetails']['auth-types'].length; i2++) {
                    result.results[i].result.clouddetails.authTypes[i2] = resp['results'][i]['result']['CloudDetails']['auth-types'][i2];
                  }
                  result.results[i].result.clouddetails.endpoint = resp['results'][i]['result']['CloudDetails']['endpoint'];
                  result.results[i].result.clouddetails.identityEndpoint = resp['results'][i]['result']['CloudDetails']['identity-endpoint'];
                  result.results[i].result.clouddetails.storageEndpoint = resp['results'][i]['result']['CloudDetails']['storage-endpoint'];
                  result.results[i].result.clouddetails.regions = [];
                  resp['results'][i]['result']['CloudDetails']['regions'] = resp['results'][i]['result']['CloudDetails']['regions'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['result']['CloudDetails']['regions'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#CloudRegion
                    if (resp['results'][i]['result']['CloudDetails']['regions'][i2]) {
                      result.results[i].result.clouddetails.regions[i2] = {};
                      result.results[i].result.clouddetails.regions[i2].name = resp['results'][i]['result']['CloudDetails']['regions'][i2]['name'];
                      result.results[i].result.clouddetails.regions[i2].endpoint = resp['results'][i]['result']['CloudDetails']['regions'][i2]['endpoint'];
                      result.results[i].result.clouddetails.regions[i2].identityEndpoint = resp['results'][i]['result']['CloudDetails']['regions'][i2]['identity-endpoint'];
                      result.results[i].result.clouddetails.regions[i2].storageEndpoint = resp['results'][i]['result']['CloudDetails']['regions'][i2]['storage-endpoint'];
                    }
                  }
                }
                result.results[i].result.users = [];
                resp['results'][i]['result']['users'] = resp['results'][i]['result']['users'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['users'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#CloudUserInfo
                  if (resp['results'][i]['result']['users'][i2]) {
                    result.results[i].result.users[i2] = {};
                    result.results[i].result.users[i2].user = resp['results'][i]['result']['users'][i2]['user'];
                    result.results[i].result.users[i2].displayName = resp['results'][i]['result']['users'][i2]['display-name'];
                    result.results[i].result.users[i2].access = resp['results'][i]['result']['users'][i2]['access'];
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Clouds returns the definitions of all clouds supported by the controller
    that the logged in user can see.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          clouds: map[string]{
            type: string,
            authTypes: []string,
            endpoint: string,
            identityEndpoint: string,
            storageEndpoint: string,
            regions: []{
              name: string,
              endpoint: string,
              identityEndpoint: string,
              storageEndpoint: string
            },
            caCertificates: []string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  clouds(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'Clouds',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#CloudsResult
        if (resp) {
          result = {};
          result.clouds = {};
          resp['clouds'] = resp['clouds'] || {};
          for (let k in resp['clouds']) {
            // github.com/juju/juju/apiserver/params#Cloud
            if (resp['clouds'][k]) {
              result.clouds[k] = {};
              result.clouds[k].type = resp['clouds'][k]['type'];
              result.clouds[k].authTypes = [];
              resp['clouds'][k]['auth-types'] = resp['clouds'][k]['auth-types'] || [];
              for (let i = 0; i < resp['clouds'][k]['auth-types'].length; i++) {
                result.clouds[k].authTypes[i] = resp['clouds'][k]['auth-types'][i];
              }
              result.clouds[k].endpoint = resp['clouds'][k]['endpoint'];
              result.clouds[k].identityEndpoint = resp['clouds'][k]['identity-endpoint'];
              result.clouds[k].storageEndpoint = resp['clouds'][k]['storage-endpoint'];
              result.clouds[k].regions = [];
              resp['clouds'][k]['regions'] = resp['clouds'][k]['regions'] || [];
              for (let i = 0; i < resp['clouds'][k]['regions'].length; i++) {
                // github.com/juju/juju/apiserver/params#CloudRegion
                if (resp['clouds'][k]['regions'][i]) {
                  result.clouds[k].regions[i] = {};
                  result.clouds[k].regions[i].name = resp['clouds'][k]['regions'][i]['name'];
                  result.clouds[k].regions[i].endpoint = resp['clouds'][k]['regions'][i]['endpoint'];
                  result.clouds[k].regions[i].identityEndpoint = resp['clouds'][k]['regions'][i]['identity-endpoint'];
                  result.clouds[k].regions[i].storageEndpoint = resp['clouds'][k]['regions'][i]['storage-endpoint'];
                }
              }
              result.clouds[k].caCertificates = [];
              resp['clouds'][k]['ca-certificates'] = resp['clouds'][k]['ca-certificates'] || [];
              for (let i = 0; i < resp['clouds'][k]['ca-certificates'].length; i++) {
                result.clouds[k].caCertificates[i] = resp['clouds'][k]['ca-certificates'][i];
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Credential returns the specified cloud credential for each tag, minus
    secrets.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              authType: string,
              attrs: map[string]string,
              redacted: []string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  credential(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'Credential',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#CloudCredentialResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#CloudCredentialResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#CloudCredential
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                result.results[i].result.authType = resp['results'][i]['result']['auth-type'];
                result.results[i].result.attrs = {};
                resp['results'][i]['result']['attrs'] = resp['results'][i]['result']['attrs'] || {};
                for (let k in resp['results'][i]['result']['attrs']) {
                  result.results[i].result.attrs[k] = resp['results'][i]['result']['attrs'][k];
                }
                result.results[i].result.redacted = [];
                resp['results'][i]['result']['redacted'] = resp['results'][i]['result']['redacted'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['redacted'].length; i2++) {
                  result.results[i].result.redacted[i2] = resp['results'][i]['result']['redacted'][i2];
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    CredentialContents returns the specified cloud credentials, including the
    secrets if requested. If no specific credential name/cloud was passed
    in, all credentials for this user are returned. Only credential owner
    can see its contents as well as what models use it. Controller admin
    has no special superpowers here and is treated the same as all other
    users.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          credentials: []{
            cloudName: string,
            credentialName: string
          },
          includeSecrets: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              content: {
                name: string,
                cloud: string,
                authType: string,
                attrs: map[string]string
              },
              models: []{
                model: string,
                access: string
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  credentialContents(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#CloudCredentialArgs
      if (args) {
        params = {};
        params['credentials'] = [];
        args.credentials = args.credentials || [];
        for (let i = 0; i < args.credentials.length; i++) {
          // github.com/juju/juju/apiserver/params#CloudCredentialArg
          if (args.credentials[i]) {
            params['credentials'][i] = {};
            params['credentials'][i]['cloud-name'] = args.credentials[i].cloudName;
            params['credentials'][i]['credential-name'] = args.credentials[i].credentialName;
          }
        }
        params['include-secrets'] = args.includeSecrets;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'CredentialContents',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#CredentialContentResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#CredentialContentResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ControllerCredentialInfo
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                // github.com/juju/juju/apiserver/params#CredentialContent
                if (resp['results'][i]['result']['content']) {
                  result.results[i].result.content = {};
                  result.results[i].result.content.name = resp['results'][i]['result']['content']['name'];
                  result.results[i].result.content.cloud = resp['results'][i]['result']['content']['cloud'];
                  result.results[i].result.content.authType = resp['results'][i]['result']['content']['auth-type'];
                  result.results[i].result.content.attrs = {};
                  resp['results'][i]['result']['content']['attrs'] = resp['results'][i]['result']['content']['attrs'] || {};
                  for (let k in resp['results'][i]['result']['content']['attrs']) {
                    result.results[i].result.content.attrs[k] = resp['results'][i]['result']['content']['attrs'][k];
                  }
                }
                result.results[i].result.models = [];
                resp['results'][i]['result']['models'] = resp['results'][i]['result']['models'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['models'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#ModelAccess
                  if (resp['results'][i]['result']['models'][i2]) {
                    result.results[i].result.models[i2] = {};
                    result.results[i].result.models[i2].model = resp['results'][i]['result']['models'][i2]['model'];
                    result.results[i].result.models[i2].access = resp['results'][i]['result']['models'][i2]['access'];
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    DefaultCloud returns the tag of the cloud that models will be created in by
    default.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          error: {
            message: string,
            code: string,
            info: {
              macaroon: anything,
              macaroonPath: string
            }
          },
          result: string
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  defaultCloud(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'DefaultCloud',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#StringResult
        if (resp) {
          result = {};
          // github.com/juju/juju/apiserver/params#Error
          if (resp['error']) {
            result.error = {};
            result.error.message = resp['error']['message'];
            result.error.code = resp['error']['code'];
            // github.com/juju/juju/apiserver/params#ErrorInfo
            if (resp['error']['info']) {
              result.error.info = {};
              // gopkg.in/macaroon.v2-unstable#Macaroon
              result.error.info.macaroon = resp['error']['info']['macaroon'];
              result.error.info.macaroonPath = resp['error']['info']['macaroon-path'];
            }
          }
          result.result = resp['result'];
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    InstanceTypes returns instance type information for the cloud and region in
    which the current model is deployed.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          constraints: []{
            cloudTag: string,
            region: string,
            constraints: {
              arch: string,
              container: string,
              cores: int,
              cpuPower: int,
              mem: int,
              rootDisk: int,
              tags: []string,
              instanceType: string,
              spaces: []string,
              virtType: string
            }
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            instanceTypes: []{
              name: string,
              arches: []string,
              cpuCores: int,
              memory: int,
              rootDisk: int,
              virtType: string,
              deprecated: bool,
              cost: int
            },
            costUnit: string,
            costCurrency: string,
            costDivisor: int,
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  instanceTypes(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#CloudInstanceTypesConstraints
      if (args) {
        params = {};
        params['constraints'] = [];
        args.constraints = args.constraints || [];
        for (let i = 0; i < args.constraints.length; i++) {
          // github.com/juju/juju/apiserver/params#CloudInstanceTypesConstraint
          if (args.constraints[i]) {
            params['constraints'][i] = {};
            params['constraints'][i]['cloud-tag'] = args.constraints[i].cloudTag;
            params['constraints'][i]['region'] = args.constraints[i].region;
            // github.com/juju/juju/constraints#Value
            if (args.constraints[i].constraints) {
              params['constraints'][i]['constraints'] = {};
              params['constraints'][i]['constraints']['arch'] = args.constraints[i].constraints.arch;
              // github.com/juju/juju/instance#ContainerType
              params['constraints'][i]['constraints']['container'] = args.constraints[i].constraints.container;
              params['constraints'][i]['constraints']['cores'] = args.constraints[i].constraints.cores;
              params['constraints'][i]['constraints']['cpu-power'] = args.constraints[i].constraints.cpuPower;
              params['constraints'][i]['constraints']['mem'] = args.constraints[i].constraints.mem;
              params['constraints'][i]['constraints']['root-disk'] = args.constraints[i].constraints.rootDisk;
              params['constraints'][i]['constraints']['tags'] = [];
              args.constraints[i].constraints.tags = args.constraints[i].constraints.tags || [];
              for (let i2 = 0; i2 < args.constraints[i].constraints.tags.length; i2++) {
                params['constraints'][i]['constraints']['tags'][i2] = args.constraints[i].constraints.tags[i2];
              }
              params['constraints'][i]['constraints']['instance-type'] = args.constraints[i].constraints.instanceType;
              params['constraints'][i]['constraints']['spaces'] = [];
              args.constraints[i].constraints.spaces = args.constraints[i].constraints.spaces || [];
              for (let i2 = 0; i2 < args.constraints[i].constraints.spaces.length; i2++) {
                params['constraints'][i]['constraints']['spaces'][i2] = args.constraints[i].constraints.spaces[i2];
              }
              params['constraints'][i]['constraints']['virt-type'] = args.constraints[i].constraints.virtType;
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'InstanceTypes',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#InstanceTypesResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#InstanceTypesResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].instanceTypes = [];
              resp['results'][i]['instance-types'] = resp['results'][i]['instance-types'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['instance-types'].length; i2++) {
                // github.com/juju/juju/apiserver/params#InstanceType
                if (resp['results'][i]['instance-types'][i2]) {
                  result.results[i].instanceTypes[i2] = {};
                  result.results[i].instanceTypes[i2].name = resp['results'][i]['instance-types'][i2]['name'];
                  result.results[i].instanceTypes[i2].arches = [];
                  resp['results'][i]['instance-types'][i2]['arches'] = resp['results'][i]['instance-types'][i2]['arches'] || [];
                  for (let i3 = 0; i3 < resp['results'][i]['instance-types'][i2]['arches'].length; i3++) {
                    result.results[i].instanceTypes[i2].arches[i3] = resp['results'][i]['instance-types'][i2]['arches'][i3];
                  }
                  result.results[i].instanceTypes[i2].cpuCores = resp['results'][i]['instance-types'][i2]['cpu-cores'];
                  result.results[i].instanceTypes[i2].memory = resp['results'][i]['instance-types'][i2]['memory'];
                  result.results[i].instanceTypes[i2].rootDisk = resp['results'][i]['instance-types'][i2]['root-disk'];
                  result.results[i].instanceTypes[i2].virtType = resp['results'][i]['instance-types'][i2]['virt-type'];
                  result.results[i].instanceTypes[i2].deprecated = resp['results'][i]['instance-types'][i2]['deprecated'];
                  result.results[i].instanceTypes[i2].cost = resp['results'][i]['instance-types'][i2]['cost'];
                }
              }
              result.results[i].costUnit = resp['results'][i]['cost-unit'];
              result.results[i].costCurrency = resp['results'][i]['cost-currency'];
              result.results[i].costDivisor = resp['results'][i]['cost-divisor'];
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListCloudInfo returns clouds that the specified user has access to.
    Controller admins (superuser) can list clouds for any user. Other users
    can only ask about their own clouds.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          userTag: string,
          all: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              clouddetails: {
                type: string,
                authTypes: []string,
                endpoint: string,
                identityEndpoint: string,
                storageEndpoint: string,
                regions: []{
                  name: string,
                  endpoint: string,
                  identityEndpoint: string,
                  storageEndpoint: string
                }
              },
              userAccess: string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listCloudInfo(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ListCloudsRequest
      if (args) {
        params = {};
        params['user-tag'] = args.userTag;
        params['all'] = args.all;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'ListCloudInfo',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ListCloudInfoResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ListCloudInfoResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ListCloudInfo
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                // github.com/juju/juju/apiserver/params#CloudDetails
                if (resp['results'][i]['result']['CloudDetails']) {
                  result.results[i].result.clouddetails = {};
                  result.results[i].result.clouddetails.type = resp['results'][i]['result']['CloudDetails']['type'];
                  result.results[i].result.clouddetails.authTypes = [];
                  resp['results'][i]['result']['CloudDetails']['auth-types'] = resp['results'][i]['result']['CloudDetails']['auth-types'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['result']['CloudDetails']['auth-types'].length; i2++) {
                    result.results[i].result.clouddetails.authTypes[i2] = resp['results'][i]['result']['CloudDetails']['auth-types'][i2];
                  }
                  result.results[i].result.clouddetails.endpoint = resp['results'][i]['result']['CloudDetails']['endpoint'];
                  result.results[i].result.clouddetails.identityEndpoint = resp['results'][i]['result']['CloudDetails']['identity-endpoint'];
                  result.results[i].result.clouddetails.storageEndpoint = resp['results'][i]['result']['CloudDetails']['storage-endpoint'];
                  result.results[i].result.clouddetails.regions = [];
                  resp['results'][i]['result']['CloudDetails']['regions'] = resp['results'][i]['result']['CloudDetails']['regions'] || [];
                  for (let i2 = 0; i2 < resp['results'][i]['result']['CloudDetails']['regions'].length; i2++) {
                    // github.com/juju/juju/apiserver/params#CloudRegion
                    if (resp['results'][i]['result']['CloudDetails']['regions'][i2]) {
                      result.results[i].result.clouddetails.regions[i2] = {};
                      result.results[i].result.clouddetails.regions[i2].name = resp['results'][i]['result']['CloudDetails']['regions'][i2]['name'];
                      result.results[i].result.clouddetails.regions[i2].endpoint = resp['results'][i]['result']['CloudDetails']['regions'][i2]['endpoint'];
                      result.results[i].result.clouddetails.regions[i2].identityEndpoint = resp['results'][i]['result']['CloudDetails']['regions'][i2]['identity-endpoint'];
                      result.results[i].result.clouddetails.regions[i2].storageEndpoint = resp['results'][i]['result']['CloudDetails']['regions'][i2]['storage-endpoint'];
                    }
                  }
                }
                result.results[i].result.userAccess = resp['results'][i]['result']['user-access'];
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ModifyCloudAccess changes the model access granted to users.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          changes: []{
            userTag: string,
            cloudTag: string,
            action: string,
            access: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  modifyCloudAccess(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ModifyCloudAccessRequest
      if (args) {
        params = {};
        params['changes'] = [];
        args.changes = args.changes || [];
        for (let i = 0; i < args.changes.length; i++) {
          // github.com/juju/juju/apiserver/params#ModifyCloudAccess
          if (args.changes[i]) {
            params['changes'][i] = {};
            params['changes'][i]['user-tag'] = args.changes[i].userTag;
            params['changes'][i]['cloud-tag'] = args.changes[i].cloudTag;
            // github.com/juju/juju/apiserver/params#CloudAction
            params['changes'][i]['action'] = args.changes[i].action;
            params['changes'][i]['access'] = args.changes[i].access;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'ModifyCloudAccess',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    RemoveClouds removes the specified clouds from the controller. If a cloud
    is in use (has models deployed to it), the removal will fail.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  removeClouds(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'RemoveClouds',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    RevokeCredentials revokes a set of cloud credentials.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  revokeCredentials(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'RevokeCredentials',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    UpdateCredentials updates a set of cloud credentials' content.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          credentials: []{
            tag: string,
            credential: {
              authType: string,
              attrs: map[string]string,
              redacted: []string
            }
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  updateCredentials(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#TaggedCredentials
      if (args) {
        params = {};
        params['credentials'] = [];
        args.credentials = args.credentials || [];
        for (let i = 0; i < args.credentials.length; i++) {
          // github.com/juju/juju/apiserver/params#TaggedCredential
          if (args.credentials[i]) {
            params['credentials'][i] = {};
            params['credentials'][i]['tag'] = args.credentials[i].tag;
            // github.com/juju/juju/apiserver/params#CloudCredential
            if (args.credentials[i].credential) {
              params['credentials'][i]['credential'] = {};
              params['credentials'][i]['credential']['auth-type'] = args.credentials[i].credential.authType;
              params['credentials'][i]['credential']['attrs'] = {};
              args.credentials[i].credential.attrs = args.credentials[i].credential.attrs || {};
              for (let k in args.credentials[i].credential.attrs) {
                params['credentials'][i]['credential']['attrs'][k] = args.credentials[i].credential.attrs[k];
              }
              params['credentials'][i]['credential']['redacted'] = [];
              args.credentials[i].credential.redacted = args.credentials[i].credential.redacted || [];
              for (let i2 = 0; i2 < args.credentials[i].credential.redacted.length; i2++) {
                params['credentials'][i]['credential']['redacted'][i2] = args.credentials[i].credential.redacted[i2];
              }
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'UpdateCredentials',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    UpdateCredentialsCheckModels updates a set of cloud credentials' content.
    If there are any models that are using a credential and these models
    are not going to be visible with updated credential content, there will
    be detailed validation errors per model. Controller admins can 'force'
    an update of the credential regardless of whether it is deemed valid or
    not.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          credentials: []{
            tag: string,
            credential: {
              authType: string,
              attrs: map[string]string,
              redacted: []string
            }
          },
          force: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            tag: string,
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            },
            models: []{
              uuid: string,
              name: string,
              errors: []{
                error: {
                  message: string,
                  code: string,
                  info: {
                    macaroon: anything,
                    macaroonPath: string
                  }
                }
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  updateCredentialsCheckModels(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#UpdateCredentialArgs
      if (args) {
        params = {};
        params['credentials'] = [];
        args.credentials = args.credentials || [];
        for (let i = 0; i < args.credentials.length; i++) {
          // github.com/juju/juju/apiserver/params#TaggedCredential
          if (args.credentials[i]) {
            params['credentials'][i] = {};
            params['credentials'][i]['tag'] = args.credentials[i].tag;
            // github.com/juju/juju/apiserver/params#CloudCredential
            if (args.credentials[i].credential) {
              params['credentials'][i]['credential'] = {};
              params['credentials'][i]['credential']['auth-type'] = args.credentials[i].credential.authType;
              params['credentials'][i]['credential']['attrs'] = {};
              args.credentials[i].credential.attrs = args.credentials[i].credential.attrs || {};
              for (let k in args.credentials[i].credential.attrs) {
                params['credentials'][i]['credential']['attrs'][k] = args.credentials[i].credential.attrs[k];
              }
              params['credentials'][i]['credential']['redacted'] = [];
              args.credentials[i].credential.redacted = args.credentials[i].credential.redacted || [];
              for (let i2 = 0; i2 < args.credentials[i].credential.redacted.length; i2++) {
                params['credentials'][i]['credential']['redacted'][i2] = args.credentials[i].credential.redacted[i2];
              }
            }
          }
        }
        params['force'] = args.force;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'UpdateCredentialsCheckModels',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#UpdateCredentialResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#UpdateCredentialResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].tag = resp['results'][i]['tag'];
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
              result.results[i].models = [];
              resp['results'][i]['models'] = resp['results'][i]['models'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['models'].length; i2++) {
                // github.com/juju/juju/apiserver/params#UpdateCredentialModelResult
                if (resp['results'][i]['models'][i2]) {
                  result.results[i].models[i2] = {};
                  result.results[i].models[i2].uuid = resp['results'][i]['models'][i2]['uuid'];
                  result.results[i].models[i2].name = resp['results'][i]['models'][i2]['name'];
                  result.results[i].models[i2].errors = [];
                  resp['results'][i]['models'][i2]['errors'] = resp['results'][i]['models'][i2]['errors'] || [];
                  for (let i3 = 0; i3 < resp['results'][i]['models'][i2]['errors'].length; i3++) {
                    // github.com/juju/juju/apiserver/params#ErrorResult
                    if (resp['results'][i]['models'][i2]['errors'][i3]) {
                      result.results[i].models[i2].errors[i3] = {};
                      // github.com/juju/juju/apiserver/params#Error
                      if (resp['results'][i]['models'][i2]['errors'][i3]['error']) {
                        result.results[i].models[i2].errors[i3].error = {};
                        result.results[i].models[i2].errors[i3].error.message = resp['results'][i]['models'][i2]['errors'][i3]['error']['message'];
                        result.results[i].models[i2].errors[i3].error.code = resp['results'][i]['models'][i2]['errors'][i3]['error']['code'];
                        // github.com/juju/juju/apiserver/params#ErrorInfo
                        if (resp['results'][i]['models'][i2]['errors'][i3]['error']['info']) {
                          result.results[i].models[i2].errors[i3].error.info = {};
                          // gopkg.in/macaroon.v2-unstable#Macaroon
                          result.results[i].models[i2].errors[i3].error.info.macaroon = resp['results'][i]['models'][i2]['errors'][i3]['error']['info']['macaroon'];
                          result.results[i].models[i2].errors[i3].error.info.macaroonPath = resp['results'][i]['models'][i2]['errors'][i3]['error']['info']['macaroon-path'];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    UserCredentials returns the cloud credentials for a set of users.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          userClouds: []{
            userTag: string,
            cloudTag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            },
            result: []string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  userCredentials(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#UserClouds
      if (args) {
        params = {};
        params['user-clouds'] = [];
        args.userClouds = args.userClouds || [];
        for (let i = 0; i < args.userClouds.length; i++) {
          // github.com/juju/juju/apiserver/params#UserCloud
          if (args.userClouds[i]) {
            params['user-clouds'][i] = {};
            params['user-clouds'][i]['user-tag'] = args.userClouds[i].userTag;
            params['user-clouds'][i]['cloud-tag'] = args.userClouds[i].cloudTag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Cloud',
        request: 'UserCredentials',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#StringsResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#StringsResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
              result.results[i].result = [];
              resp['results'][i]['result'] = resp['results'][i]['result'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['result'].length; i2++) {
                result.results[i].result[i2] = resp['results'][i]['result'][i2];
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapCloud) {
  // Decorate the facade class in order to improve user experience.
  CloudV2 = wrappers.wrapCloud(CloudV2);
}

module.exports = CloudV2;