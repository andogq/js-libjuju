/**
  Juju ImageManager version 2.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Tue 2018/11/27 16:23:14 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  ImageManagerAPI implements the ImageManager interface and is the concrete
  implementation of the api end point.
*/
class ImageManagerV2 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 2;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    DeleteImages deletes the images matching the specified filter.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          images: []{
            kind: string,
            arch: string,
            series: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  deleteImages(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ImageFilterParams
      if (args) {
        params = {};
        params['images'] = [];
        args.images = args.images || [];
        for (let i = 0; i < args.images.length; i++) {
          // github.com/juju/juju/apiserver/params#ImageSpec
          if (args.images[i]) {
            params['images'][i] = {};
            params['images'][i]['kind'] = args.images[i].kind;
            params['images'][i]['arch'] = args.images[i].arch;
            params['images'][i]['series'] = args.images[i].series;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ImageManager',
        request: 'DeleteImages',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListImages returns images matching the specified filter.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          images: []{
            kind: string,
            arch: string,
            series: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          result: []{
            kind: string,
            arch: string,
            series: string,
            url: string,
            created: time
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listImages(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ImageFilterParams
      if (args) {
        params = {};
        params['images'] = [];
        args.images = args.images || [];
        for (let i = 0; i < args.images.length; i++) {
          // github.com/juju/juju/apiserver/params#ImageSpec
          if (args.images[i]) {
            params['images'][i] = {};
            params['images'][i]['kind'] = args.images[i].kind;
            params['images'][i]['arch'] = args.images[i].arch;
            params['images'][i]['series'] = args.images[i].series;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ImageManager',
        request: 'ListImages',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ListImageResult
        if (resp) {
          result = {};
          result.result = [];
          resp['result'] = resp['result'] || [];
          for (let i = 0; i < resp['result'].length; i++) {
            // github.com/juju/juju/apiserver/params#ImageMetadata
            if (resp['result'][i]) {
              result.result[i] = {};
              result.result[i].kind = resp['result'][i]['kind'];
              result.result[i].arch = resp['result'][i]['arch'];
              result.result[i].series = resp['result'][i]['series'];
              result.result[i].url = resp['result'][i]['url'];
              // time#Time
              result.result[i].created = resp['result'][i]['created'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapImageManager) {
  // Decorate the facade class in order to improve user experience.
  ImageManagerV2 = wrappers.wrapImageManager(ImageManagerV2);
}

module.exports = ImageManagerV2;