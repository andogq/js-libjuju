/**
  Juju MetricsDebug version 2.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Fri 2018/11/09 14:32:38 UTC. Do not manually edit this file.
*/

'use strict';

const {createAsyncHandler} = require('../transform.js');

/**
  MetricsDebugAPI implements the metricsdebug interface and is the concrete
  implementation of the api end point.
*/
class MetricsDebugV2 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 2;
  }

  /**
    GetMetrics returns all metrics stored by the state server.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            metrics: []{
              time: time,
              key: string,
              value: string,
              unit: string,
              labels: map[string]string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  getMetrics(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'MetricsDebug',
        request: 'GetMetrics',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#MetricResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#EntityMetrics
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].metrics = [];
              resp['results'][i]['metrics'] = resp['results'][i]['metrics'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['metrics'].length; i2++) {
                // github.com/juju/juju/apiserver/params#MetricResult
                if (resp['results'][i]['metrics'][i2]) {
                  result.results[i].metrics[i2] = {};
                  // time#Time
                  result.results[i].metrics[i2].time = resp['results'][i]['metrics'][i2]['time'];
                  result.results[i].metrics[i2].key = resp['results'][i]['metrics'][i2]['key'];
                  result.results[i].metrics[i2].value = resp['results'][i]['metrics'][i2]['value'];
                  result.results[i].metrics[i2].unit = resp['results'][i]['metrics'][i2]['unit'];
                  result.results[i].metrics[i2].labels = {};
                  resp['results'][i]['metrics'][i2]['labels'] = resp['results'][i]['metrics'][i2]['labels'] || {};
                  for (let k in resp['results'][i]['metrics'][i2]['labels']) {
                    result.results[i].metrics[i2].labels[k] = resp['results'][i]['metrics'][i2]['labels'][k];
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    SetMeterStatus sets meter statuses for entities.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          statues: []{
            tag: string,
            code: string,
            info: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  setMeterStatus(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#MeterStatusParams
      if (args) {
        params = {};
        params['statues'] = [];
        args.statues = args.statues || [];
        for (let i = 0; i < args.statues.length; i++) {
          // github.com/juju/juju/apiserver/params#MeterStatusParam
          if (args.statues[i]) {
            params['statues'][i] = {};
            params['statues'][i]['tag'] = args.statues[i].tag;
            params['statues'][i]['code'] = args.statues[i].code;
            params['statues'][i]['info'] = args.statues[i].info;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'MetricsDebug',
        request: 'SetMeterStatus',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapMetricsDebug) {
  // Decorate the facade class in order to improve user experience.
  MetricsDebugV2 = wrappers.wrapMetricsDebug(MetricsDebugV2);
}

module.exports = MetricsDebugV2;