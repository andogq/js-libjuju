/**
  Juju Subnets version 2.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Fri 2018/11/09 14:32:38 UTC. Do not manually edit this file.
*/

'use strict';

const {createAsyncHandler} = require('../transform.js');

/**
  SubnetsAPI defines the methods the Subnets API facade implements.
*/
class SubnetsV2 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 2;
  }

  /**
    AddSubnets adds existing subnets to Juju.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          subnets: []{
            subnetTag: string,
            subnetProviderId: string,
            providerNetworkId: string,
            spaceTag: string,
            vlanTag: int,
            zones: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  addSubnets(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#AddSubnetsParams
      if (args) {
        params = {};
        params['subnets'] = [];
        args.subnets = args.subnets || [];
        for (let i = 0; i < args.subnets.length; i++) {
          // github.com/juju/juju/apiserver/params#AddSubnetParams
          if (args.subnets[i]) {
            params['subnets'][i] = {};
            params['subnets'][i]['subnet-tag'] = args.subnets[i].subnetTag;
            params['subnets'][i]['subnet-provider-id'] = args.subnets[i].subnetProviderId;
            params['subnets'][i]['provider-network-id'] = args.subnets[i].providerNetworkId;
            params['subnets'][i]['space-tag'] = args.subnets[i].spaceTag;
            params['subnets'][i]['vlan-tag'] = args.subnets[i].vlanTag;
            params['subnets'][i]['zones'] = [];
            args.subnets[i].zones = args.subnets[i].zones || [];
            for (let i2 = 0; i2 < args.subnets[i].zones.length; i2++) {
              params['subnets'][i]['zones'][i2] = args.subnets[i].zones[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Subnets',
        request: 'AddSubnets',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    AllSpaces returns the tags of all network spaces known to Juju.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            },
            tag: string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  allSpaces(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'Subnets',
        request: 'AllSpaces',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#SpaceResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#SpaceResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
              result.results[i].tag = resp['results'][i]['tag'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    AllZones returns all availability zones known to Juju. If a zone is
    unusable, unavailable, or deprecated the Available field will be false.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            },
            name: string,
            available: bool
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  allZones(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'Subnets',
        request: 'AllZones',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ZoneResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ZoneResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
              result.results[i].name = resp['results'][i]['name'];
              result.results[i].available = resp['results'][i]['available'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListSubnets returns the matching subnets after applying optional filters.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          spaceTag: string,
          zone: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            cidr: string,
            providerId: string,
            providerNetworkId: string,
            providerSpaceId: string,
            vlanTag: int,
            life: string,
            spaceTag: string,
            zones: []string,
            status: string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listSubnets(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#SubnetsFilters
      if (args) {
        params = {};
        params['space-tag'] = args.spaceTag;
        params['zone'] = args.zone;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Subnets',
        request: 'ListSubnets',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ListSubnetsResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#Subnet
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].cidr = resp['results'][i]['cidr'];
              result.results[i].providerId = resp['results'][i]['provider-id'];
              result.results[i].providerNetworkId = resp['results'][i]['provider-network-id'];
              result.results[i].providerSpaceId = resp['results'][i]['provider-space-id'];
              result.results[i].vlanTag = resp['results'][i]['vlan-tag'];
              // github.com/juju/juju/apiserver/params#Life
              result.results[i].life = resp['results'][i]['life'];
              result.results[i].spaceTag = resp['results'][i]['space-tag'];
              result.results[i].zones = [];
              resp['results'][i]['zones'] = resp['results'][i]['zones'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['zones'].length; i2++) {
                result.results[i].zones[i2] = resp['results'][i]['zones'][i2];
              }
              result.results[i].status = resp['results'][i]['status'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapSubnets) {
  // Decorate the facade class in order to improve user experience.
  SubnetsV2 = wrappers.wrapSubnets(SubnetsV2);
}

module.exports = SubnetsV2;