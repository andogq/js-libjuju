/**
  Juju Backups version 2.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Tue 2018/11/27 16:23:14 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  APIv2 serves backup-specific API methods for version 2.
*/
class BackupsV2 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 2;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    There is no documentation for this method.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          notes: string,
          keepCopy: bool,
          noDownload: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          id: string,
          checksum: string,
          checksumFormat: string,
          size: int,
          stored: time,
          started: time,
          finished: time,
          notes: string,
          model: string,
          machine: string,
          hostname: string,
          version: anything,
          series: string,
          caCert: string,
          caPrivateKey: string,
          filename: string
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  create(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#BackupsCreateArgs
      if (args) {
        params = {};
        params['notes'] = args.notes;
        params['keep-copy'] = args.keepCopy;
        params['no-download'] = args.noDownload;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Backups',
        request: 'Create',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#BackupsMetadataResult
        if (resp) {
          result = {};
          result.id = resp['id'];
          result.checksum = resp['checksum'];
          result.checksumFormat = resp['checksum-format'];
          result.size = resp['size'];
          // time#Time
          result.stored = resp['stored'];
          // time#Time
          result.started = resp['started'];
          // time#Time
          result.finished = resp['finished'];
          result.notes = resp['notes'];
          result.model = resp['model'];
          result.machine = resp['machine'];
          result.hostname = resp['hostname'];
          // github.com/juju/version#Number
          result.version = resp['version'];
          result.series = resp['series'];
          result.caCert = resp['ca-cert'];
          result.caPrivateKey = resp['ca-private-key'];
          result.filename = resp['filename'];
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    FinishRestore implements the server side of Backups.FinishRestore.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  finishRestore(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'Backups',
        request: 'FinishRestore',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Info provides the implementation of the API method.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          id: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          id: string,
          checksum: string,
          checksumFormat: string,
          size: int,
          stored: time,
          started: time,
          finished: time,
          notes: string,
          model: string,
          machine: string,
          hostname: string,
          version: anything,
          series: string,
          caCert: string,
          caPrivateKey: string,
          filename: string
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  info(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#BackupsInfoArgs
      if (args) {
        params = {};
        params['id'] = args.id;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Backups',
        request: 'Info',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#BackupsMetadataResult
        if (resp) {
          result = {};
          result.id = resp['id'];
          result.checksum = resp['checksum'];
          result.checksumFormat = resp['checksum-format'];
          result.size = resp['size'];
          // time#Time
          result.stored = resp['stored'];
          // time#Time
          result.started = resp['started'];
          // time#Time
          result.finished = resp['finished'];
          result.notes = resp['notes'];
          result.model = resp['model'];
          result.machine = resp['machine'];
          result.hostname = resp['hostname'];
          // github.com/juju/version#Number
          result.version = resp['version'];
          result.series = resp['series'];
          result.caCert = resp['ca-cert'];
          result.caPrivateKey = resp['ca-private-key'];
          result.filename = resp['filename'];
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    List provides the implementation of the API method.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        <object>
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          list: []{
            id: string,
            checksum: string,
            checksumFormat: string,
            size: int,
            stored: time,
            started: time,
            finished: time,
            notes: string,
            model: string,
            machine: string,
            hostname: string,
            version: anything,
            series: string,
            caCert: string,
            caPrivateKey: string,
            filename: string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  list(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#BackupsListArgs
      if (args) {
        params = {};
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Backups',
        request: 'List',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#BackupsListResult
        if (resp) {
          result = {};
          result.list = [];
          resp['list'] = resp['list'] || [];
          for (let i = 0; i < resp['list'].length; i++) {
            // github.com/juju/juju/apiserver/params#BackupsMetadataResult
            if (resp['list'][i]) {
              result.list[i] = {};
              result.list[i].id = resp['list'][i]['id'];
              result.list[i].checksum = resp['list'][i]['checksum'];
              result.list[i].checksumFormat = resp['list'][i]['checksum-format'];
              result.list[i].size = resp['list'][i]['size'];
              // time#Time
              result.list[i].stored = resp['list'][i]['stored'];
              // time#Time
              result.list[i].started = resp['list'][i]['started'];
              // time#Time
              result.list[i].finished = resp['list'][i]['finished'];
              result.list[i].notes = resp['list'][i]['notes'];
              result.list[i].model = resp['list'][i]['model'];
              result.list[i].machine = resp['list'][i]['machine'];
              result.list[i].hostname = resp['list'][i]['hostname'];
              // github.com/juju/version#Number
              result.list[i].version = resp['list'][i]['version'];
              result.list[i].series = resp['list'][i]['series'];
              result.list[i].caCert = resp['list'][i]['ca-cert'];
              result.list[i].caPrivateKey = resp['list'][i]['ca-private-key'];
              result.list[i].filename = resp['list'][i]['filename'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    PrepareRestore implements the server side of Backups.PrepareRestore.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  prepareRestore(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'Backups',
        request: 'PrepareRestore',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Remove deletes the backups defined by ID from the database.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          ids: []string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  remove(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#BackupsRemoveArgs
      if (args) {
        params = {};
        params['ids'] = [];
        args.ids = args.ids || [];
        for (let i = 0; i < args.ids.length; i++) {
          params['ids'][i] = args.ids[i];
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Backups',
        request: 'Remove',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Restore implements the server side of Backups.Restore.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          backupId: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  restore(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#RestoreArgs
      if (args) {
        params = {};
        params['backup-id'] = args.backupId;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Backups',
        request: 'Restore',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapBackups) {
  // Decorate the facade class in order to improve user experience.
  BackupsV2 = wrappers.wrapBackups(BackupsV2);
}

module.exports = BackupsV2;