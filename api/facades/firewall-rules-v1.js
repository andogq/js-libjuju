/**
  Juju FirewallRules version 1.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Tue 2018/11/27 16:23:14 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  API provides the firewallrules facade APIs for v1.
*/
class FirewallRulesV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    ListFirewallRules returns all the firewall rules.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          rules: []{
            knownService: string,
            whitelistCidrs: []string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listFirewallRules(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'FirewallRules',
        request: 'ListFirewallRules',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ListFirewallRulesResults
        if (resp) {
          result = {};
          result.rules = [];
          resp['Rules'] = resp['Rules'] || [];
          for (let i = 0; i < resp['Rules'].length; i++) {
            // github.com/juju/juju/apiserver/params#FirewallRule
            if (resp['Rules'][i]) {
              result.rules[i] = {};
              // github.com/juju/juju/apiserver/params#KnownServiceValue
              result.rules[i].knownService = resp['Rules'][i]['known-service'];
              result.rules[i].whitelistCidrs = [];
              resp['Rules'][i]['whitelist-cidrs'] = resp['Rules'][i]['whitelist-cidrs'] || [];
              for (let i2 = 0; i2 < resp['Rules'][i]['whitelist-cidrs'].length; i2++) {
                result.rules[i].whitelistCidrs[i2] = resp['Rules'][i]['whitelist-cidrs'][i2];
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    SetFirewallRules creates or updates the specified firewall rules.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          args: []{
            knownService: string,
            whitelistCidrs: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  setFirewallRules(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#FirewallRuleArgs
      if (args) {
        params = {};
        params['args'] = [];
        args.args = args.args || [];
        for (let i = 0; i < args.args.length; i++) {
          // github.com/juju/juju/apiserver/params#FirewallRule
          if (args.args[i]) {
            params['args'][i] = {};
            // github.com/juju/juju/apiserver/params#KnownServiceValue
            params['args'][i]['known-service'] = args.args[i].knownService;
            params['args'][i]['whitelist-cidrs'] = [];
            args.args[i].whitelistCidrs = args.args[i].whitelistCidrs || [];
            for (let i2 = 0; i2 < args.args[i].whitelistCidrs.length; i2++) {
              params['args'][i]['whitelist-cidrs'][i2] = args.args[i].whitelistCidrs[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'FirewallRules',
        request: 'SetFirewallRules',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapFirewallRules) {
  // Decorate the facade class in order to improve user experience.
  FirewallRulesV1 = wrappers.wrapFirewallRules(FirewallRulesV1);
}

module.exports = FirewallRulesV1;