/**
  Juju ModelManager version 4.
  This API facade is available on controller connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Fri 2018/11/16 13:11:58 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  ModelManagerAPIV4 provides a way to wrap the different calls between version
  4 and version 5 of the model manager API
*/
class ModelManagerV4 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 4;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    CreateModel creates a new model using the account and model config
    specified in the args.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          name: string,
          ownerTag: string,
          config: map[string]anything,
          cloudTag: string,
          region: string,
          credential: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          name: string,
          type: string,
          uuid: string,
          controllerUuid: string,
          providerType: string,
          defaultSeries: string,
          cloudTag: string,
          cloudRegion: string,
          cloudCredentialTag: string,
          ownerTag: string,
          life: string,
          status: {
            status: string,
            info: string,
            data: map[string]anything,
            since: time
          },
          users: []{
            user: string,
            displayName: string,
            lastConnection: time,
            access: string
          },
          machines: []{
            id: string,
            hardware: {
              arch: string,
              mem: int,
              rootDisk: int,
              cores: int,
              cpuPower: int,
              tags: []string,
              availabilityZone: string
            },
            instanceId: string,
            status: string,
            hasVote: bool,
            wantsVote: bool
          },
          migration: {
            status: string,
            start: time,
            end: time
          },
          sla: {
            level: string,
            owner: string
          },
          agentVersion: anything
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  createModel(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ModelCreateArgs
      if (args) {
        params = {};
        params['name'] = args.name;
        params['owner-tag'] = args.ownerTag;
        params['config'] = {};
        args.config = args.config || {};
        for (let k in args.config) {
          params['config'][k] = args.config[k];
        }
        params['cloud-tag'] = args.cloudTag;
        params['region'] = args.region;
        params['credential'] = args.credential;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'CreateModel',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ModelInfo
        if (resp) {
          result = {};
          result.name = resp['name'];
          result.type = resp['type'];
          result.uuid = resp['uuid'];
          result.controllerUuid = resp['controller-uuid'];
          result.providerType = resp['provider-type'];
          result.defaultSeries = resp['default-series'];
          result.cloudTag = resp['cloud-tag'];
          result.cloudRegion = resp['cloud-region'];
          result.cloudCredentialTag = resp['cloud-credential-tag'];
          result.ownerTag = resp['owner-tag'];
          // github.com/juju/juju/apiserver/params#Life
          result.life = resp['life'];
          // github.com/juju/juju/apiserver/params#EntityStatus
          if (resp['status']) {
            result.status = {};
            // github.com/juju/juju/core/status#Status
            result.status.status = resp['status']['status'];
            result.status.info = resp['status']['info'];
            result.status.data = {};
            resp['status']['data'] = resp['status']['data'] || {};
            for (let k in resp['status']['data']) {
              result.status.data[k] = resp['status']['data'][k];
            }
            // time#Time
            result.status.since = resp['status']['since'];
          }
          result.users = [];
          resp['users'] = resp['users'] || [];
          for (let i = 0; i < resp['users'].length; i++) {
            // github.com/juju/juju/apiserver/params#ModelUserInfo
            if (resp['users'][i]) {
              result.users[i] = {};
              result.users[i].user = resp['users'][i]['user'];
              result.users[i].displayName = resp['users'][i]['display-name'];
              // time#Time
              result.users[i].lastConnection = resp['users'][i]['last-connection'];
              // github.com/juju/juju/apiserver/params#UserAccessPermission
              result.users[i].access = resp['users'][i]['access'];
            }
          }
          result.machines = [];
          resp['machines'] = resp['machines'] || [];
          for (let i = 0; i < resp['machines'].length; i++) {
            // github.com/juju/juju/apiserver/params#ModelMachineInfo
            if (resp['machines'][i]) {
              result.machines[i] = {};
              result.machines[i].id = resp['machines'][i]['id'];
              // github.com/juju/juju/apiserver/params#MachineHardware
              if (resp['machines'][i]['hardware']) {
                result.machines[i].hardware = {};
                result.machines[i].hardware.arch = resp['machines'][i]['hardware']['arch'];
                result.machines[i].hardware.mem = resp['machines'][i]['hardware']['mem'];
                result.machines[i].hardware.rootDisk = resp['machines'][i]['hardware']['root-disk'];
                result.machines[i].hardware.cores = resp['machines'][i]['hardware']['cores'];
                result.machines[i].hardware.cpuPower = resp['machines'][i]['hardware']['cpu-power'];
                result.machines[i].hardware.tags = [];
                resp['machines'][i]['hardware']['tags'] = resp['machines'][i]['hardware']['tags'] || [];
                for (let i2 = 0; i2 < resp['machines'][i]['hardware']['tags'].length; i2++) {
                  result.machines[i].hardware.tags[i2] = resp['machines'][i]['hardware']['tags'][i2];
                }
                result.machines[i].hardware.availabilityZone = resp['machines'][i]['hardware']['availability-zone'];
              }
              result.machines[i].instanceId = resp['machines'][i]['instance-id'];
              result.machines[i].status = resp['machines'][i]['status'];
              result.machines[i].hasVote = resp['machines'][i]['has-vote'];
              result.machines[i].wantsVote = resp['machines'][i]['wants-vote'];
            }
          }
          // github.com/juju/juju/apiserver/params#ModelMigrationStatus
          if (resp['migration']) {
            result.migration = {};
            result.migration.status = resp['migration']['status'];
            // time#Time
            result.migration.start = resp['migration']['start'];
            // time#Time
            result.migration.end = resp['migration']['end'];
          }
          // github.com/juju/juju/apiserver/params#ModelSLAInfo
          if (resp['sla']) {
            result.sla = {};
            result.sla.level = resp['sla']['level'];
            result.sla.owner = resp['sla']['owner'];
          }
          // github.com/juju/version#Number
          result.agentVersion = resp['agent-version'];
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    DestroyModels will try to destroy the specified models. If there is a block
    on destruction, this method will return an error.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          models: []{
            modelTag: string,
            destroyStorage: bool
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  destroyModels(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#DestroyModelsParams
      if (args) {
        params = {};
        params['models'] = [];
        args.models = args.models || [];
        for (let i = 0; i < args.models.length; i++) {
          // github.com/juju/juju/apiserver/params#DestroyModelParams
          if (args.models[i]) {
            params['models'][i] = {};
            params['models'][i]['model-tag'] = args.models[i].modelTag;
            params['models'][i]['destroy-storage'] = args.models[i].destroyStorage;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'DestroyModels',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    DumpModels will export the models into the database agnostic
    representation. The user needs to either be a controller admin, or have
    admin privileges on the model itself.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          },
          simplified: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            },
            result: string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  dumpModels(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#DumpModelRequest
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
        params['simplified'] = args.simplified;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'DumpModels',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#StringResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#StringResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
              result.results[i].result = resp['results'][i]['result'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    DumpModelsDB will gather all documents from all model collections for the
    specified model. The map result contains a map of collection names to
    lists of documents represented as maps.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: map[string]anything,
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  dumpModelsDB(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'DumpModelsDB',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#MapResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#MapResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].result = {};
              resp['results'][i]['result'] = resp['results'][i]['result'] || {};
              for (let k in resp['results'][i]['result']) {
                result.results[i].result[k] = resp['results'][i]['result'][k];
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListModelSummaries returns models that the specified user has access to in
    the current server.  Controller admins (superuser) can list models for
    any user.  Other users can only ask about their own models.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          userTag: string,
          all: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              name: string,
              uuid: string,
              type: string,
              controllerUuid: string,
              providerType: string,
              defaultSeries: string,
              cloudTag: string,
              cloudRegion: string,
              cloudCredentialTag: string,
              ownerTag: string,
              life: string,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              userAccess: string,
              lastConnection: time,
              counts: []{
                entity: string,
                count: int
              },
              migration: {
                status: string,
                start: time,
                end: time
              },
              sla: {
                level: string,
                owner: string
              },
              agentVersion: anything
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listModelSummaries(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ModelSummariesRequest
      if (args) {
        params = {};
        params['user-tag'] = args.userTag;
        params['all'] = args.all;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'ListModelSummaries',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ModelSummaryResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ModelSummaryResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ModelSummary
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                result.results[i].result.name = resp['results'][i]['result']['name'];
                result.results[i].result.uuid = resp['results'][i]['result']['uuid'];
                result.results[i].result.type = resp['results'][i]['result']['type'];
                result.results[i].result.controllerUuid = resp['results'][i]['result']['controller-uuid'];
                result.results[i].result.providerType = resp['results'][i]['result']['provider-type'];
                result.results[i].result.defaultSeries = resp['results'][i]['result']['default-series'];
                result.results[i].result.cloudTag = resp['results'][i]['result']['cloud-tag'];
                result.results[i].result.cloudRegion = resp['results'][i]['result']['cloud-region'];
                result.results[i].result.cloudCredentialTag = resp['results'][i]['result']['cloud-credential-tag'];
                result.results[i].result.ownerTag = resp['results'][i]['result']['owner-tag'];
                // github.com/juju/juju/apiserver/params#Life
                result.results[i].result.life = resp['results'][i]['result']['life'];
                // github.com/juju/juju/apiserver/params#EntityStatus
                if (resp['results'][i]['result']['status']) {
                  result.results[i].result.status = {};
                  // github.com/juju/juju/core/status#Status
                  result.results[i].result.status.status = resp['results'][i]['result']['status']['status'];
                  result.results[i].result.status.info = resp['results'][i]['result']['status']['info'];
                  result.results[i].result.status.data = {};
                  resp['results'][i]['result']['status']['data'] = resp['results'][i]['result']['status']['data'] || {};
                  for (let k in resp['results'][i]['result']['status']['data']) {
                    result.results[i].result.status.data[k] = resp['results'][i]['result']['status']['data'][k];
                  }
                  // time#Time
                  result.results[i].result.status.since = resp['results'][i]['result']['status']['since'];
                }
                // github.com/juju/juju/apiserver/params#UserAccessPermission
                result.results[i].result.userAccess = resp['results'][i]['result']['user-access'];
                // time#Time
                result.results[i].result.lastConnection = resp['results'][i]['result']['last-connection'];
                result.results[i].result.counts = [];
                resp['results'][i]['result']['counts'] = resp['results'][i]['result']['counts'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['counts'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#ModelEntityCount
                  if (resp['results'][i]['result']['counts'][i2]) {
                    result.results[i].result.counts[i2] = {};
                    // github.com/juju/juju/apiserver/params#CountedEntity
                    result.results[i].result.counts[i2].entity = resp['results'][i]['result']['counts'][i2]['entity'];
                    result.results[i].result.counts[i2].count = resp['results'][i]['result']['counts'][i2]['count'];
                  }
                }
                // github.com/juju/juju/apiserver/params#ModelMigrationStatus
                if (resp['results'][i]['result']['migration']) {
                  result.results[i].result.migration = {};
                  result.results[i].result.migration.status = resp['results'][i]['result']['migration']['status'];
                  // time#Time
                  result.results[i].result.migration.start = resp['results'][i]['result']['migration']['start'];
                  // time#Time
                  result.results[i].result.migration.end = resp['results'][i]['result']['migration']['end'];
                }
                // github.com/juju/juju/apiserver/params#ModelSLAInfo
                if (resp['results'][i]['result']['sla']) {
                  result.results[i].result.sla = {};
                  result.results[i].result.sla.level = resp['results'][i]['result']['sla']['level'];
                  result.results[i].result.sla.owner = resp['results'][i]['result']['sla']['owner'];
                }
                // github.com/juju/version#Number
                result.results[i].result.agentVersion = resp['results'][i]['result']['agent-version'];
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListModels returns the models that the specified user has access to in the
    current server.  Controller admins (superuser) can list models for any
    user.  Other users can only ask about their own models.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          tag: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          userModels: []{
            model: {
              name: string,
              uuid: string,
              type: string,
              ownerTag: string
            },
            lastConnection: time
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listModels(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entity
      if (args) {
        params = {};
        params['tag'] = args.tag;
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'ListModels',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#UserModelList
        if (resp) {
          result = {};
          result.userModels = [];
          resp['user-models'] = resp['user-models'] || [];
          for (let i = 0; i < resp['user-models'].length; i++) {
            // github.com/juju/juju/apiserver/params#UserModel
            if (resp['user-models'][i]) {
              result.userModels[i] = {};
              // github.com/juju/juju/apiserver/params#Model
              if (resp['user-models'][i]['model']) {
                result.userModels[i].model = {};
                result.userModels[i].model.name = resp['user-models'][i]['model']['name'];
                result.userModels[i].model.uuid = resp['user-models'][i]['model']['uuid'];
                result.userModels[i].model.type = resp['user-models'][i]['model']['type'];
                result.userModels[i].model.ownerTag = resp['user-models'][i]['model']['owner-tag'];
              }
              // time#Time
              result.userModels[i].lastConnection = resp['user-models'][i]['last-connection'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ModelDefaults returns the default config values used when creating a new
    model.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          config: map[string]{
            default: anything,
            controller: anything,
            regions: []{
              regionName: string,
              value: anything
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  modelDefaults(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'ModelDefaults',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ModelDefaultsResult
        if (resp) {
          result = {};
          result.config = {};
          resp['config'] = resp['config'] || {};
          for (let k in resp['config']) {
            // github.com/juju/juju/apiserver/params#ModelDefaults
            if (resp['config'][k]) {
              result.config[k] = {};
              result.config[k].default = resp['config'][k]['default'];
              result.config[k].controller = resp['config'][k]['controller'];
              result.config[k].regions = [];
              resp['config'][k]['regions'] = resp['config'][k]['regions'] || [];
              for (let i = 0; i < resp['config'][k]['regions'].length; i++) {
                // github.com/juju/juju/apiserver/params#RegionDefaults
                if (resp['config'][k]['regions'][i]) {
                  result.config[k].regions[i] = {};
                  result.config[k].regions[i].regionName = resp['config'][k]['regions'][i]['region-name'];
                  result.config[k].regions[i].value = resp['config'][k]['regions'][i]['value'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ModelInfo returns information about the specified models.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              name: string,
              type: string,
              uuid: string,
              controllerUuid: string,
              providerType: string,
              defaultSeries: string,
              cloudTag: string,
              cloudRegion: string,
              cloudCredentialTag: string,
              ownerTag: string,
              life: string,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              users: []{
                user: string,
                displayName: string,
                lastConnection: time,
                access: string
              },
              machines: []{
                id: string,
                hardware: {
                  arch: string,
                  mem: int,
                  rootDisk: int,
                  cores: int,
                  cpuPower: int,
                  tags: []string,
                  availabilityZone: string
                },
                instanceId: string,
                status: string,
                hasVote: bool,
                wantsVote: bool
              },
              migration: {
                status: string,
                start: time,
                end: time
              },
              sla: {
                level: string,
                owner: string
              },
              agentVersion: anything
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  modelInfo(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'ModelInfo',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ModelInfoResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ModelInfoResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ModelInfo
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                result.results[i].result.name = resp['results'][i]['result']['name'];
                result.results[i].result.type = resp['results'][i]['result']['type'];
                result.results[i].result.uuid = resp['results'][i]['result']['uuid'];
                result.results[i].result.controllerUuid = resp['results'][i]['result']['controller-uuid'];
                result.results[i].result.providerType = resp['results'][i]['result']['provider-type'];
                result.results[i].result.defaultSeries = resp['results'][i]['result']['default-series'];
                result.results[i].result.cloudTag = resp['results'][i]['result']['cloud-tag'];
                result.results[i].result.cloudRegion = resp['results'][i]['result']['cloud-region'];
                result.results[i].result.cloudCredentialTag = resp['results'][i]['result']['cloud-credential-tag'];
                result.results[i].result.ownerTag = resp['results'][i]['result']['owner-tag'];
                // github.com/juju/juju/apiserver/params#Life
                result.results[i].result.life = resp['results'][i]['result']['life'];
                // github.com/juju/juju/apiserver/params#EntityStatus
                if (resp['results'][i]['result']['status']) {
                  result.results[i].result.status = {};
                  // github.com/juju/juju/core/status#Status
                  result.results[i].result.status.status = resp['results'][i]['result']['status']['status'];
                  result.results[i].result.status.info = resp['results'][i]['result']['status']['info'];
                  result.results[i].result.status.data = {};
                  resp['results'][i]['result']['status']['data'] = resp['results'][i]['result']['status']['data'] || {};
                  for (let k in resp['results'][i]['result']['status']['data']) {
                    result.results[i].result.status.data[k] = resp['results'][i]['result']['status']['data'][k];
                  }
                  // time#Time
                  result.results[i].result.status.since = resp['results'][i]['result']['status']['since'];
                }
                result.results[i].result.users = [];
                resp['results'][i]['result']['users'] = resp['results'][i]['result']['users'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['users'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#ModelUserInfo
                  if (resp['results'][i]['result']['users'][i2]) {
                    result.results[i].result.users[i2] = {};
                    result.results[i].result.users[i2].user = resp['results'][i]['result']['users'][i2]['user'];
                    result.results[i].result.users[i2].displayName = resp['results'][i]['result']['users'][i2]['display-name'];
                    // time#Time
                    result.results[i].result.users[i2].lastConnection = resp['results'][i]['result']['users'][i2]['last-connection'];
                    // github.com/juju/juju/apiserver/params#UserAccessPermission
                    result.results[i].result.users[i2].access = resp['results'][i]['result']['users'][i2]['access'];
                  }
                }
                result.results[i].result.machines = [];
                resp['results'][i]['result']['machines'] = resp['results'][i]['result']['machines'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['machines'].length; i2++) {
                  // github.com/juju/juju/apiserver/params#ModelMachineInfo
                  if (resp['results'][i]['result']['machines'][i2]) {
                    result.results[i].result.machines[i2] = {};
                    result.results[i].result.machines[i2].id = resp['results'][i]['result']['machines'][i2]['id'];
                    // github.com/juju/juju/apiserver/params#MachineHardware
                    if (resp['results'][i]['result']['machines'][i2]['hardware']) {
                      result.results[i].result.machines[i2].hardware = {};
                      result.results[i].result.machines[i2].hardware.arch = resp['results'][i]['result']['machines'][i2]['hardware']['arch'];
                      result.results[i].result.machines[i2].hardware.mem = resp['results'][i]['result']['machines'][i2]['hardware']['mem'];
                      result.results[i].result.machines[i2].hardware.rootDisk = resp['results'][i]['result']['machines'][i2]['hardware']['root-disk'];
                      result.results[i].result.machines[i2].hardware.cores = resp['results'][i]['result']['machines'][i2]['hardware']['cores'];
                      result.results[i].result.machines[i2].hardware.cpuPower = resp['results'][i]['result']['machines'][i2]['hardware']['cpu-power'];
                      result.results[i].result.machines[i2].hardware.tags = [];
                      resp['results'][i]['result']['machines'][i2]['hardware']['tags'] = resp['results'][i]['result']['machines'][i2]['hardware']['tags'] || [];
                      for (let i3 = 0; i3 < resp['results'][i]['result']['machines'][i2]['hardware']['tags'].length; i3++) {
                        result.results[i].result.machines[i2].hardware.tags[i3] = resp['results'][i]['result']['machines'][i2]['hardware']['tags'][i3];
                      }
                      result.results[i].result.machines[i2].hardware.availabilityZone = resp['results'][i]['result']['machines'][i2]['hardware']['availability-zone'];
                    }
                    result.results[i].result.machines[i2].instanceId = resp['results'][i]['result']['machines'][i2]['instance-id'];
                    result.results[i].result.machines[i2].status = resp['results'][i]['result']['machines'][i2]['status'];
                    result.results[i].result.machines[i2].hasVote = resp['results'][i]['result']['machines'][i2]['has-vote'];
                    result.results[i].result.machines[i2].wantsVote = resp['results'][i]['result']['machines'][i2]['wants-vote'];
                  }
                }
                // github.com/juju/juju/apiserver/params#ModelMigrationStatus
                if (resp['results'][i]['result']['migration']) {
                  result.results[i].result.migration = {};
                  result.results[i].result.migration.status = resp['results'][i]['result']['migration']['status'];
                  // time#Time
                  result.results[i].result.migration.start = resp['results'][i]['result']['migration']['start'];
                  // time#Time
                  result.results[i].result.migration.end = resp['results'][i]['result']['migration']['end'];
                }
                // github.com/juju/juju/apiserver/params#ModelSLAInfo
                if (resp['results'][i]['result']['sla']) {
                  result.results[i].result.sla = {};
                  result.results[i].result.sla.level = resp['results'][i]['result']['sla']['level'];
                  result.results[i].result.sla.owner = resp['results'][i]['result']['sla']['owner'];
                }
                // github.com/juju/version#Number
                result.results[i].result.agentVersion = resp['results'][i]['result']['agent-version'];
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ModelStatus returns a summary of the model.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          models: []{
            modelTag: string,
            life: string,
            hostedMachineCount: int,
            applicationCount: int,
            ownerTag: string,
            machines: []{
              id: string,
              hardware: {
                arch: string,
                mem: int,
                rootDisk: int,
                cores: int,
                cpuPower: int,
                tags: []string,
                availabilityZone: string
              },
              instanceId: string,
              status: string,
              hasVote: bool,
              wantsVote: bool
            },
            volumes: []{
              id: string,
              providerId: string,
              status: string,
              detachable: bool
            },
            filesystems: []{
              id: string,
              providerId: string,
              status: string,
              detachable: bool
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  modelStatus(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'ModelStatus',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ModelStatusResults
        if (resp) {
          result = {};
          result.models = [];
          resp['models'] = resp['models'] || [];
          for (let i = 0; i < resp['models'].length; i++) {
            // github.com/juju/juju/apiserver/params#ModelStatus
            if (resp['models'][i]) {
              result.models[i] = {};
              result.models[i].modelTag = resp['models'][i]['model-tag'];
              // github.com/juju/juju/apiserver/params#Life
              result.models[i].life = resp['models'][i]['life'];
              result.models[i].hostedMachineCount = resp['models'][i]['hosted-machine-count'];
              result.models[i].applicationCount = resp['models'][i]['application-count'];
              result.models[i].ownerTag = resp['models'][i]['owner-tag'];
              result.models[i].machines = [];
              resp['models'][i]['machines'] = resp['models'][i]['machines'] || [];
              for (let i2 = 0; i2 < resp['models'][i]['machines'].length; i2++) {
                // github.com/juju/juju/apiserver/params#ModelMachineInfo
                if (resp['models'][i]['machines'][i2]) {
                  result.models[i].machines[i2] = {};
                  result.models[i].machines[i2].id = resp['models'][i]['machines'][i2]['id'];
                  // github.com/juju/juju/apiserver/params#MachineHardware
                  if (resp['models'][i]['machines'][i2]['hardware']) {
                    result.models[i].machines[i2].hardware = {};
                    result.models[i].machines[i2].hardware.arch = resp['models'][i]['machines'][i2]['hardware']['arch'];
                    result.models[i].machines[i2].hardware.mem = resp['models'][i]['machines'][i2]['hardware']['mem'];
                    result.models[i].machines[i2].hardware.rootDisk = resp['models'][i]['machines'][i2]['hardware']['root-disk'];
                    result.models[i].machines[i2].hardware.cores = resp['models'][i]['machines'][i2]['hardware']['cores'];
                    result.models[i].machines[i2].hardware.cpuPower = resp['models'][i]['machines'][i2]['hardware']['cpu-power'];
                    result.models[i].machines[i2].hardware.tags = [];
                    resp['models'][i]['machines'][i2]['hardware']['tags'] = resp['models'][i]['machines'][i2]['hardware']['tags'] || [];
                    for (let i3 = 0; i3 < resp['models'][i]['machines'][i2]['hardware']['tags'].length; i3++) {
                      result.models[i].machines[i2].hardware.tags[i3] = resp['models'][i]['machines'][i2]['hardware']['tags'][i3];
                    }
                    result.models[i].machines[i2].hardware.availabilityZone = resp['models'][i]['machines'][i2]['hardware']['availability-zone'];
                  }
                  result.models[i].machines[i2].instanceId = resp['models'][i]['machines'][i2]['instance-id'];
                  result.models[i].machines[i2].status = resp['models'][i]['machines'][i2]['status'];
                  result.models[i].machines[i2].hasVote = resp['models'][i]['machines'][i2]['has-vote'];
                  result.models[i].machines[i2].wantsVote = resp['models'][i]['machines'][i2]['wants-vote'];
                }
              }
              result.models[i].volumes = [];
              resp['models'][i]['volumes'] = resp['models'][i]['volumes'] || [];
              for (let i2 = 0; i2 < resp['models'][i]['volumes'].length; i2++) {
                // github.com/juju/juju/apiserver/params#ModelVolumeInfo
                if (resp['models'][i]['volumes'][i2]) {
                  result.models[i].volumes[i2] = {};
                  result.models[i].volumes[i2].id = resp['models'][i]['volumes'][i2]['id'];
                  result.models[i].volumes[i2].providerId = resp['models'][i]['volumes'][i2]['provider-id'];
                  result.models[i].volumes[i2].status = resp['models'][i]['volumes'][i2]['status'];
                  result.models[i].volumes[i2].detachable = resp['models'][i]['volumes'][i2]['detachable'];
                }
              }
              result.models[i].filesystems = [];
              resp['models'][i]['filesystems'] = resp['models'][i]['filesystems'] || [];
              for (let i2 = 0; i2 < resp['models'][i]['filesystems'].length; i2++) {
                // github.com/juju/juju/apiserver/params#ModelFilesystemInfo
                if (resp['models'][i]['filesystems'][i2]) {
                  result.models[i].filesystems[i2] = {};
                  result.models[i].filesystems[i2].id = resp['models'][i]['filesystems'][i2]['id'];
                  result.models[i].filesystems[i2].providerId = resp['models'][i]['filesystems'][i2]['provider-id'];
                  result.models[i].filesystems[i2].status = resp['models'][i]['filesystems'][i2]['status'];
                  result.models[i].filesystems[i2].detachable = resp['models'][i]['filesystems'][i2]['detachable'];
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['models'][i]['error']) {
                result.models[i].error = {};
                result.models[i].error.message = resp['models'][i]['error']['message'];
                result.models[i].error.code = resp['models'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['models'][i]['error']['info']) {
                  result.models[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.models[i].error.info.macaroon = resp['models'][i]['error']['info']['macaroon'];
                  result.models[i].error.info.macaroonPath = resp['models'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ModifyModelAccess changes the model access granted to users.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          changes: []{
            userTag: string,
            action: string,
            access: string,
            modelTag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  modifyModelAccess(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ModifyModelAccessRequest
      if (args) {
        params = {};
        params['changes'] = [];
        args.changes = args.changes || [];
        for (let i = 0; i < args.changes.length; i++) {
          // github.com/juju/juju/apiserver/params#ModifyModelAccess
          if (args.changes[i]) {
            params['changes'][i] = {};
            params['changes'][i]['user-tag'] = args.changes[i].userTag;
            // github.com/juju/juju/apiserver/params#ModelAction
            params['changes'][i]['action'] = args.changes[i].action;
            // github.com/juju/juju/apiserver/params#UserAccessPermission
            params['changes'][i]['access'] = args.changes[i].access;
            params['changes'][i]['model-tag'] = args.changes[i].modelTag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'ModifyModelAccess',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    SetModelDefaults writes new values for the specified default model
    settings.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          config: []{
            cloudTag: string,
            cloudRegion: string,
            config: map[string]anything
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  setModelDefaults(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#SetModelDefaults
      if (args) {
        params = {};
        params['config'] = [];
        args.config = args.config || [];
        for (let i = 0; i < args.config.length; i++) {
          // github.com/juju/juju/apiserver/params#ModelDefaultValues
          if (args.config[i]) {
            params['config'][i] = {};
            params['config'][i]['cloud-tag'] = args.config[i].cloudTag;
            params['config'][i]['cloud-region'] = args.config[i].cloudRegion;
            params['config'][i]['config'] = {};
            args.config[i].config = args.config[i].config || {};
            for (let k in args.config[i].config) {
              params['config'][i]['config'][k] = args.config[i].config[k];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'SetModelDefaults',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    UnsetModelDefaults removes the specified default model settings.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          keys: []{
            cloudTag: string,
            cloudRegion: string,
            keys: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  unsetModelDefaults(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#UnsetModelDefaults
      if (args) {
        params = {};
        params['keys'] = [];
        args.keys = args.keys || [];
        for (let i = 0; i < args.keys.length; i++) {
          // github.com/juju/juju/apiserver/params#ModelUnsetKeys
          if (args.keys[i]) {
            params['keys'][i] = {};
            params['keys'][i]['cloud-tag'] = args.keys[i].cloudTag;
            params['keys'][i]['cloud-region'] = args.keys[i].cloudRegion;
            params['keys'][i]['keys'] = [];
            args.keys[i].keys = args.keys[i].keys || [];
            for (let i2 = 0; i2 < args.keys[i].keys.length; i2++) {
              params['keys'][i]['keys'][i2] = args.keys[i].keys[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'ModelManager',
        request: 'UnsetModelDefaults',
        version: 4,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapModelManager) {
  // Decorate the facade class in order to improve user experience.
  ModelManagerV4 = wrappers.wrapModelManager(ModelManagerV4);
}

module.exports = ModelManagerV4;