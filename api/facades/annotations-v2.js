/**
  Juju Annotations version 2.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Tue 2018/11/27 16:23:13 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  API implements the service interface and is the concrete implementation of
  the api end point.
*/
class AnnotationsV2 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 2;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    Get returns annotations for given entities. If annotations cannot be
    retrieved for a given entity, an error is returned. Each entity is
    treated independently and, hence, will fail or succeed independently.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            entity: string,
            annotations: map[string]string,
            error: {
              error: {
                message: string,
                code: string,
                info: {
                  macaroon: anything,
                  macaroonPath: string
                }
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  get(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Annotations',
        request: 'Get',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#AnnotationsGetResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#AnnotationsGetResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].entity = resp['results'][i]['entity'];
              result.results[i].annotations = {};
              resp['results'][i]['annotations'] = resp['results'][i]['annotations'] || {};
              for (let k in resp['results'][i]['annotations']) {
                result.results[i].annotations[k] = resp['results'][i]['annotations'][k];
              }
              // github.com/juju/juju/apiserver/params#ErrorResult
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                // github.com/juju/juju/apiserver/params#Error
                if (resp['results'][i]['error']['error']) {
                  result.results[i].error.error = {};
                  result.results[i].error.error.message = resp['results'][i]['error']['error']['message'];
                  result.results[i].error.error.code = resp['results'][i]['error']['error']['code'];
                  // github.com/juju/juju/apiserver/params#ErrorInfo
                  if (resp['results'][i]['error']['error']['info']) {
                    result.results[i].error.error.info = {};
                    // gopkg.in/macaroon.v2-unstable#Macaroon
                    result.results[i].error.error.info.macaroon = resp['results'][i]['error']['error']['info']['macaroon'];
                    result.results[i].error.error.info.macaroonPath = resp['results'][i]['error']['error']['info']['macaroon-path'];
                  }
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Set stores annotations for given entities

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          annotations: []{
            entity: string,
            annotations: map[string]string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  set(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#AnnotationsSet
      if (args) {
        params = {};
        params['annotations'] = [];
        args.annotations = args.annotations || [];
        for (let i = 0; i < args.annotations.length; i++) {
          // github.com/juju/juju/apiserver/params#EntityAnnotations
          if (args.annotations[i]) {
            params['annotations'][i] = {};
            params['annotations'][i]['entity'] = args.annotations[i].entity;
            params['annotations'][i]['annotations'] = {};
            args.annotations[i].annotations = args.annotations[i].annotations || {};
            for (let k in args.annotations[i].annotations) {
              params['annotations'][i]['annotations'][k] = args.annotations[i].annotations[k];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Annotations',
        request: 'Set',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapAnnotations) {
  // Decorate the facade class in order to improve user experience.
  AnnotationsV2 = wrappers.wrapAnnotations(AnnotationsV2);
}

module.exports = AnnotationsV2;