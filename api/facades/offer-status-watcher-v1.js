/**
  Juju OfferStatusWatcher version 1.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Tue 2018/11/27 16:23:14 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  srvOfferStatusWatcher defines the API wrapping a
  crossmodelrelations.OfferStatusWatcher.
*/
class OfferStatusWatcherV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    Next returns when a change has occurred to an entity of the collection
    being watched since the most recent call to Next or the Watch call that
    created the srvOfferStatusWatcher.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          watcherId: string,
          changes: []{
            offerName: string,
            status: {
              status: string,
              info: string,
              data: map[string]anything,
              since: time
            }
          },
          error: {
            message: string,
            code: string,
            info: {
              macaroon: anything,
              macaroonPath: string
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  next(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'OfferStatusWatcher',
        request: 'Next',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#OfferStatusWatchResult
        if (resp) {
          result = {};
          result.watcherId = resp['watcher-id'];
          result.changes = [];
          resp['changes'] = resp['changes'] || [];
          for (let i = 0; i < resp['changes'].length; i++) {
            // github.com/juju/juju/apiserver/params#OfferStatusChange
            if (resp['changes'][i]) {
              result.changes[i] = {};
              result.changes[i].offerName = resp['changes'][i]['offer-name'];
              // github.com/juju/juju/apiserver/params#EntityStatus
              if (resp['changes'][i]['status']) {
                result.changes[i].status = {};
                // github.com/juju/juju/core/status#Status
                result.changes[i].status.status = resp['changes'][i]['status']['status'];
                result.changes[i].status.info = resp['changes'][i]['status']['info'];
                result.changes[i].status.data = {};
                resp['changes'][i]['status']['data'] = resp['changes'][i]['status']['data'] || {};
                for (let k in resp['changes'][i]['status']['data']) {
                  result.changes[i].status.data[k] = resp['changes'][i]['status']['data'][k];
                }
                // time#Time
                result.changes[i].status.since = resp['changes'][i]['status']['since'];
              }
            }
          }
          // github.com/juju/juju/apiserver/params#Error
          if (resp['error']) {
            result.error = {};
            result.error.message = resp['error']['message'];
            result.error.code = resp['error']['code'];
            // github.com/juju/juju/apiserver/params#ErrorInfo
            if (resp['error']['info']) {
              result.error.info = {};
              // gopkg.in/macaroon.v2-unstable#Macaroon
              result.error.info.macaroon = resp['error']['info']['macaroon'];
              result.error.info.macaroonPath = resp['error']['info']['macaroon-path'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Stop stops the watcher.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  stop(callback) {
    return new Promise((resolve, reject) => {
      const params = {};
      // Prepare the request to the Juju API.
      const req = {
        type: 'OfferStatusWatcher',
        request: 'Stop',
        version: 1,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapOfferStatusWatcher) {
  // Decorate the facade class in order to improve user experience.
  OfferStatusWatcherV1 = wrappers.wrapOfferStatusWatcher(OfferStatusWatcherV1);
}

module.exports = OfferStatusWatcherV1;