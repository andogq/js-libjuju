/**
  Juju HighAvailability version 2.
  This API facade is available on both controller and model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Fri 2018/11/09 14:32:38 UTC. Do not manually edit this file.
*/

'use strict';

const {createAsyncHandler} = require('../transform.js');

/**
  HighAvailabilityAPI implements the HighAvailability interface and is the
  concrete implementation of the api end point.
*/
class HighAvailabilityV2 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 2;
  }

  /**
    EnableHA adds controller machines as necessary to ensure the controller has
    the number of machines specified.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          specs: []{
            numControllers: int,
            constraints: {
              arch: string,
              container: string,
              cores: int,
              cpuPower: int,
              mem: int,
              rootDisk: int,
              tags: []string,
              instanceType: string,
              spaces: []string,
              virtType: string
            },
            series: string,
            placement: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              added: []string,
              maintained: []string,
              removed: []string,
              promoted: []string,
              demoted: []string,
              converted: []string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  enableHA(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ControllersSpecs
      if (args) {
        params = {};
        params['specs'] = [];
        args.specs = args.specs || [];
        for (let i = 0; i < args.specs.length; i++) {
          // github.com/juju/juju/apiserver/params#ControllersSpec
          if (args.specs[i]) {
            params['specs'][i] = {};
            params['specs'][i]['num-controllers'] = args.specs[i].numControllers;
            // github.com/juju/juju/constraints#Value
            if (args.specs[i].constraints) {
              params['specs'][i]['constraints'] = {};
              params['specs'][i]['constraints']['arch'] = args.specs[i].constraints.arch;
              // github.com/juju/juju/instance#ContainerType
              params['specs'][i]['constraints']['container'] = args.specs[i].constraints.container;
              params['specs'][i]['constraints']['cores'] = args.specs[i].constraints.cores;
              params['specs'][i]['constraints']['cpu-power'] = args.specs[i].constraints.cpuPower;
              params['specs'][i]['constraints']['mem'] = args.specs[i].constraints.mem;
              params['specs'][i]['constraints']['root-disk'] = args.specs[i].constraints.rootDisk;
              params['specs'][i]['constraints']['tags'] = [];
              args.specs[i].constraints.tags = args.specs[i].constraints.tags || [];
              for (let i2 = 0; i2 < args.specs[i].constraints.tags.length; i2++) {
                params['specs'][i]['constraints']['tags'][i2] = args.specs[i].constraints.tags[i2];
              }
              params['specs'][i]['constraints']['instance-type'] = args.specs[i].constraints.instanceType;
              params['specs'][i]['constraints']['spaces'] = [];
              args.specs[i].constraints.spaces = args.specs[i].constraints.spaces || [];
              for (let i2 = 0; i2 < args.specs[i].constraints.spaces.length; i2++) {
                params['specs'][i]['constraints']['spaces'][i2] = args.specs[i].constraints.spaces[i2];
              }
              params['specs'][i]['constraints']['virt-type'] = args.specs[i].constraints.virtType;
            }
            params['specs'][i]['series'] = args.specs[i].series;
            params['specs'][i]['placement'] = [];
            args.specs[i].placement = args.specs[i].placement || [];
            for (let i2 = 0; i2 < args.specs[i].placement.length; i2++) {
              params['specs'][i]['placement'][i2] = args.specs[i].placement[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'HighAvailability',
        request: 'EnableHA',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ControllersChangeResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ControllersChangeResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#ControllersChanges
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                result.results[i].result.added = [];
                resp['results'][i]['result']['added'] = resp['results'][i]['result']['added'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['added'].length; i2++) {
                  result.results[i].result.added[i2] = resp['results'][i]['result']['added'][i2];
                }
                result.results[i].result.maintained = [];
                resp['results'][i]['result']['maintained'] = resp['results'][i]['result']['maintained'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['maintained'].length; i2++) {
                  result.results[i].result.maintained[i2] = resp['results'][i]['result']['maintained'][i2];
                }
                result.results[i].result.removed = [];
                resp['results'][i]['result']['removed'] = resp['results'][i]['result']['removed'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['removed'].length; i2++) {
                  result.results[i].result.removed[i2] = resp['results'][i]['result']['removed'][i2];
                }
                result.results[i].result.promoted = [];
                resp['results'][i]['result']['promoted'] = resp['results'][i]['result']['promoted'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['promoted'].length; i2++) {
                  result.results[i].result.promoted[i2] = resp['results'][i]['result']['promoted'][i2];
                }
                result.results[i].result.demoted = [];
                resp['results'][i]['result']['demoted'] = resp['results'][i]['result']['demoted'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['demoted'].length; i2++) {
                  result.results[i].result.demoted[i2] = resp['results'][i]['result']['demoted'][i2];
                }
                result.results[i].result.converted = [];
                resp['results'][i]['result']['converted'] = resp['results'][i]['result']['converted'] || [];
                for (let i2 = 0; i2 < resp['results'][i]['result']['converted'].length; i2++) {
                  result.results[i].result.converted[i2] = resp['results'][i]['result']['converted'][i2];
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ResumeHAReplicationAfterUpgrade will add the upgraded members of HA cluster
    to the upgraded master.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          members: []{
            id: int,
            address: string,
            priority: float,
            tags: map[string]string,
            votes: int
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  resumeHAReplicationAfterUpgrade(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#ResumeReplicationParams
      if (args) {
        params = {};
        params['members'] = [];
        args.members = args.members || [];
        for (let i = 0; i < args.members.length; i++) {
          // github.com/juju/replicaset#Member
          if (args.members[i]) {
            params['members'][i] = {};
            params['members'][i]['Id'] = args.members[i].id;
            params['members'][i]['Address'] = args.members[i].address;
            params['members'][i]['Priority'] = args.members[i].priority;
            params['members'][i]['Tags'] = {};
            args.members[i].tags = args.members[i].tags || {};
            for (let k in args.members[i].tags) {
              params['members'][i]['Tags'][k] = args.members[i].tags[k];
            }
            params['members'][i]['Votes'] = args.members[i].votes;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'HighAvailability',
        request: 'ResumeHAReplicationAfterUpgrade',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    StopHAReplicationForUpgrade will prompt the HA cluster to enter upgrade
    mongo mode.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          target: {
            major: int,
            minor: int,
            patch: string,
            engine: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          rsMembers: []{
            id: int,
            address: string,
            priority: float,
            tags: map[string]string,
            votes: int
          },
          master: {
            tag: string,
            publicAddress: {
              value: string,
              type: string,
              scope: string,
              spacename: string,
              spaceproviderid: string
            },
            series: string
          },
          haMembers: []{
            tag: string,
            publicAddress: {
              value: string,
              type: string,
              scope: string,
              spacename: string,
              spaceproviderid: string
            },
            series: string
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  stopHAReplicationForUpgrade(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#UpgradeMongoParams
      if (args) {
        params = {};
        // github.com/juju/juju/apiserver/params#MongoVersion
        if (args.target) {
          params['target'] = {};
          params['target']['major'] = args.target.major;
          params['target']['minor'] = args.target.minor;
          params['target']['patch'] = args.target.patch;
          params['target']['engine'] = args.target.engine;
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'HighAvailability',
        request: 'StopHAReplicationForUpgrade',
        version: 2,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#MongoUpgradeResults
        if (resp) {
          result = {};
          result.rsMembers = [];
          resp['rs-members'] = resp['rs-members'] || [];
          for (let i = 0; i < resp['rs-members'].length; i++) {
            // github.com/juju/replicaset#Member
            if (resp['rs-members'][i]) {
              result.rsMembers[i] = {};
              result.rsMembers[i].id = resp['rs-members'][i]['Id'];
              result.rsMembers[i].address = resp['rs-members'][i]['Address'];
              result.rsMembers[i].priority = resp['rs-members'][i]['Priority'];
              result.rsMembers[i].tags = {};
              resp['rs-members'][i]['Tags'] = resp['rs-members'][i]['Tags'] || {};
              for (let k in resp['rs-members'][i]['Tags']) {
                result.rsMembers[i].tags[k] = resp['rs-members'][i]['Tags'][k];
              }
              result.rsMembers[i].votes = resp['rs-members'][i]['Votes'];
            }
          }
          // github.com/juju/juju/apiserver/params#HAMember
          if (resp['master']) {
            result.master = {};
            result.master.tag = resp['master']['tag'];
            // github.com/juju/juju/network#Address
            if (resp['master']['public-address']) {
              result.master.publicAddress = {};
              result.master.publicAddress.value = resp['master']['public-address']['Value'];
              // github.com/juju/juju/network#AddressType
              result.master.publicAddress.type = resp['master']['public-address']['Type'];
              // github.com/juju/juju/network#Scope
              result.master.publicAddress.scope = resp['master']['public-address']['Scope'];
              // github.com/juju/juju/network#SpaceName
              result.master.publicAddress.spacename = resp['master']['public-address']['SpaceName'];
              // github.com/juju/juju/network#Id
              result.master.publicAddress.spaceproviderid = resp['master']['public-address']['SpaceProviderId'];
            }
            result.master.series = resp['master']['series'];
          }
          result.haMembers = [];
          resp['ha-members'] = resp['ha-members'] || [];
          for (let i = 0; i < resp['ha-members'].length; i++) {
            // github.com/juju/juju/apiserver/params#HAMember
            if (resp['ha-members'][i]) {
              result.haMembers[i] = {};
              result.haMembers[i].tag = resp['ha-members'][i]['tag'];
              // github.com/juju/juju/network#Address
              if (resp['ha-members'][i]['public-address']) {
                result.haMembers[i].publicAddress = {};
                result.haMembers[i].publicAddress.value = resp['ha-members'][i]['public-address']['Value'];
                // github.com/juju/juju/network#AddressType
                result.haMembers[i].publicAddress.type = resp['ha-members'][i]['public-address']['Type'];
                // github.com/juju/juju/network#Scope
                result.haMembers[i].publicAddress.scope = resp['ha-members'][i]['public-address']['Scope'];
                // github.com/juju/juju/network#SpaceName
                result.haMembers[i].publicAddress.spacename = resp['ha-members'][i]['public-address']['SpaceName'];
                // github.com/juju/juju/network#Id
                result.haMembers[i].publicAddress.spaceproviderid = resp['ha-members'][i]['public-address']['SpaceProviderId'];
              }
              result.haMembers[i].series = resp['ha-members'][i]['series'];
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapHighAvailability) {
  // Decorate the facade class in order to improve user experience.
  HighAvailabilityV2 = wrappers.wrapHighAvailability(HighAvailabilityV2);
}

module.exports = HighAvailabilityV2;