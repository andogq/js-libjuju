/**
  Juju Storage version 3.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Fri 2018/11/16 13:11:58 UTC. Do not manually edit this file.
*/

'use strict';

const {autoBind, createAsyncHandler} = require('../transform.js');

/**
  APIv3 implements the storage v3 API.
*/
class StorageV3 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 3;

    // Automatically bind all methods to instances.
    autoBind(this);
  }

  /**
    AddToUnit validates and creates additional storage instances for units. A
    "CHANGE" block can block this operation.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          storages: []{
            unit: string,
            name: string,
            storage: {
              pool: string,
              size: int,
              count: int
            }
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  addToUnit(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#StoragesAddParams
      if (args) {
        params = {};
        params['storages'] = [];
        args.storages = args.storages || [];
        for (let i = 0; i < args.storages.length; i++) {
          // github.com/juju/juju/apiserver/params#StorageAddParams
          if (args.storages[i]) {
            params['storages'][i] = {};
            params['storages'][i]['unit'] = args.storages[i].unit;
            params['storages'][i]['name'] = args.storages[i].name;
            // github.com/juju/juju/apiserver/params#StorageConstraints
            if (args.storages[i].storage) {
              params['storages'][i]['storage'] = {};
              params['storages'][i]['storage']['pool'] = args.storages[i].storage.pool;
              params['storages'][i]['storage']['size'] = args.storages[i].storage.size;
              params['storages'][i]['storage']['count'] = args.storages[i].storage.count;
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'AddToUnit',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Attach attaches existing storage instances to units. A "CHANGE" block can
    block this operation.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          ids: []{
            storageTag: string,
            unitTag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  attach(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#StorageAttachmentIds
      if (args) {
        params = {};
        params['ids'] = [];
        args.ids = args.ids || [];
        for (let i = 0; i < args.ids.length; i++) {
          // github.com/juju/juju/apiserver/params#StorageAttachmentId
          if (args.ids[i]) {
            params['ids'][i] = {};
            params['ids'][i]['storage-tag'] = args.ids[i].storageTag;
            params['ids'][i]['unit-tag'] = args.ids[i].unitTag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'Attach',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    CreatePool creates a new pool with specified parameters.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          name: string,
          provider: string,
          attrs: map[string]anything
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  createPool(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#StoragePool
      if (args) {
        params = {};
        params['name'] = args.name;
        params['provider'] = args.provider;
        params['attrs'] = {};
        args.attrs = args.attrs || {};
        for (let k in args.attrs) {
          params['attrs'][k] = args.attrs[k];
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'CreatePool',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Destroy sets the specified storage entities to Dying, unless they are
    already Dying or Dead.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  destroy(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'Destroy',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    Detach sets the specified storage attachments to Dying, unless they are
    already Dying or Dead. Any associated, persistent storage will remain
    alive.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          ids: []{
            storageTag: string,
            unitTag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  detach(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#StorageAttachmentIds
      if (args) {
        params = {};
        params['ids'] = [];
        args.ids = args.ids || [];
        for (let i = 0; i < args.ids.length; i++) {
          // github.com/juju/juju/apiserver/params#StorageAttachmentId
          if (args.ids[i]) {
            params['ids'][i] = {};
            params['ids'][i]['storage-tag'] = args.ids[i].storageTag;
            params['ids'][i]['unit-tag'] = args.ids[i].unitTag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'Detach',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#ErrorResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#ErrorResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListFilesystems returns a list of filesystems in the environment matching
    the provided filter. Each result describes a filesystem in detail,
    including the filesystem's attachments.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          filters: []{
            machines: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: []{
              filesystemTag: string,
              volumeTag: string,
              info: {
                filesystemId: string,
                pool: string,
                size: int
              },
              life: string,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              machineAttachments: map[string]{
                filesystemattachmentinfo: {
                  mountPoint: string,
                  readOnly: bool
                },
                life: string
              },
              unitAttachments: map[string]{
                filesystemattachmentinfo: {
                  mountPoint: string,
                  readOnly: bool
                },
                life: string
              },
              storage: {
                storageTag: string,
                ownerTag: string,
                kind: int,
                status: {
                  status: string,
                  info: string,
                  data: map[string]anything,
                  since: time
                },
                life: string,
                persistent: bool,
                attachments: map[string]{
                  storageTag: string,
                  unitTag: string,
                  machineTag: string,
                  location: string,
                  life: string
                }
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listFilesystems(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#FilesystemFilters
      if (args) {
        params = {};
        params['filters'] = [];
        args.filters = args.filters || [];
        for (let i = 0; i < args.filters.length; i++) {
          // github.com/juju/juju/apiserver/params#FilesystemFilter
          if (args.filters[i]) {
            params['filters'][i] = {};
            params['filters'][i]['machines'] = [];
            args.filters[i].machines = args.filters[i].machines || [];
            for (let i2 = 0; i2 < args.filters[i].machines.length; i2++) {
              params['filters'][i]['machines'][i2] = args.filters[i].machines[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'ListFilesystems',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#FilesystemDetailsListResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#FilesystemDetailsListResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].result = [];
              resp['results'][i]['result'] = resp['results'][i]['result'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['result'].length; i2++) {
                // github.com/juju/juju/apiserver/params#FilesystemDetails
                if (resp['results'][i]['result'][i2]) {
                  result.results[i].result[i2] = {};
                  result.results[i].result[i2].filesystemTag = resp['results'][i]['result'][i2]['filesystem-tag'];
                  result.results[i].result[i2].volumeTag = resp['results'][i]['result'][i2]['volume-tag'];
                  // github.com/juju/juju/apiserver/params#FilesystemInfo
                  if (resp['results'][i]['result'][i2]['info']) {
                    result.results[i].result[i2].info = {};
                    result.results[i].result[i2].info.filesystemId = resp['results'][i]['result'][i2]['info']['filesystem-id'];
                    result.results[i].result[i2].info.pool = resp['results'][i]['result'][i2]['info']['pool'];
                    result.results[i].result[i2].info.size = resp['results'][i]['result'][i2]['info']['size'];
                  }
                  // github.com/juju/juju/apiserver/params#Life
                  result.results[i].result[i2].life = resp['results'][i]['result'][i2]['life'];
                  // github.com/juju/juju/apiserver/params#EntityStatus
                  if (resp['results'][i]['result'][i2]['status']) {
                    result.results[i].result[i2].status = {};
                    // github.com/juju/juju/core/status#Status
                    result.results[i].result[i2].status.status = resp['results'][i]['result'][i2]['status']['status'];
                    result.results[i].result[i2].status.info = resp['results'][i]['result'][i2]['status']['info'];
                    result.results[i].result[i2].status.data = {};
                    resp['results'][i]['result'][i2]['status']['data'] = resp['results'][i]['result'][i2]['status']['data'] || {};
                    for (let k in resp['results'][i]['result'][i2]['status']['data']) {
                      result.results[i].result[i2].status.data[k] = resp['results'][i]['result'][i2]['status']['data'][k];
                    }
                    // time#Time
                    result.results[i].result[i2].status.since = resp['results'][i]['result'][i2]['status']['since'];
                  }
                  result.results[i].result[i2].machineAttachments = {};
                  resp['results'][i]['result'][i2]['machine-attachments'] = resp['results'][i]['result'][i2]['machine-attachments'] || {};
                  for (let k in resp['results'][i]['result'][i2]['machine-attachments']) {
                    // github.com/juju/juju/apiserver/params#FilesystemAttachmentDetails
                    if (resp['results'][i]['result'][i2]['machine-attachments'][k]) {
                      result.results[i].result[i2].machineAttachments[k] = {};
                      // github.com/juju/juju/apiserver/params#FilesystemAttachmentInfo
                      if (resp['results'][i]['result'][i2]['machine-attachments'][k]['FilesystemAttachmentInfo']) {
                        result.results[i].result[i2].machineAttachments[k].filesystemattachmentinfo = {};
                        result.results[i].result[i2].machineAttachments[k].filesystemattachmentinfo.mountPoint = resp['results'][i]['result'][i2]['machine-attachments'][k]['FilesystemAttachmentInfo']['mount-point'];
                        result.results[i].result[i2].machineAttachments[k].filesystemattachmentinfo.readOnly = resp['results'][i]['result'][i2]['machine-attachments'][k]['FilesystemAttachmentInfo']['read-only'];
                      }
                      // github.com/juju/juju/apiserver/params#Life
                      result.results[i].result[i2].machineAttachments[k].life = resp['results'][i]['result'][i2]['machine-attachments'][k]['life'];
                    }
                  }
                  result.results[i].result[i2].unitAttachments = {};
                  resp['results'][i]['result'][i2]['unit-attachments'] = resp['results'][i]['result'][i2]['unit-attachments'] || {};
                  for (let k in resp['results'][i]['result'][i2]['unit-attachments']) {
                    // github.com/juju/juju/apiserver/params#FilesystemAttachmentDetails
                    if (resp['results'][i]['result'][i2]['unit-attachments'][k]) {
                      result.results[i].result[i2].unitAttachments[k] = {};
                      // github.com/juju/juju/apiserver/params#FilesystemAttachmentInfo
                      if (resp['results'][i]['result'][i2]['unit-attachments'][k]['FilesystemAttachmentInfo']) {
                        result.results[i].result[i2].unitAttachments[k].filesystemattachmentinfo = {};
                        result.results[i].result[i2].unitAttachments[k].filesystemattachmentinfo.mountPoint = resp['results'][i]['result'][i2]['unit-attachments'][k]['FilesystemAttachmentInfo']['mount-point'];
                        result.results[i].result[i2].unitAttachments[k].filesystemattachmentinfo.readOnly = resp['results'][i]['result'][i2]['unit-attachments'][k]['FilesystemAttachmentInfo']['read-only'];
                      }
                      // github.com/juju/juju/apiserver/params#Life
                      result.results[i].result[i2].unitAttachments[k].life = resp['results'][i]['result'][i2]['unit-attachments'][k]['life'];
                    }
                  }
                  // github.com/juju/juju/apiserver/params#StorageDetails
                  if (resp['results'][i]['result'][i2]['storage']) {
                    result.results[i].result[i2].storage = {};
                    result.results[i].result[i2].storage.storageTag = resp['results'][i]['result'][i2]['storage']['storage-tag'];
                    result.results[i].result[i2].storage.ownerTag = resp['results'][i]['result'][i2]['storage']['owner-tag'];
                    // github.com/juju/juju/apiserver/params#StorageKind
                    result.results[i].result[i2].storage.kind = resp['results'][i]['result'][i2]['storage']['kind'];
                    // github.com/juju/juju/apiserver/params#EntityStatus
                    if (resp['results'][i]['result'][i2]['storage']['status']) {
                      result.results[i].result[i2].storage.status = {};
                      // github.com/juju/juju/core/status#Status
                      result.results[i].result[i2].storage.status.status = resp['results'][i]['result'][i2]['storage']['status']['status'];
                      result.results[i].result[i2].storage.status.info = resp['results'][i]['result'][i2]['storage']['status']['info'];
                      result.results[i].result[i2].storage.status.data = {};
                      resp['results'][i]['result'][i2]['storage']['status']['data'] = resp['results'][i]['result'][i2]['storage']['status']['data'] || {};
                      for (let k in resp['results'][i]['result'][i2]['storage']['status']['data']) {
                        result.results[i].result[i2].storage.status.data[k] = resp['results'][i]['result'][i2]['storage']['status']['data'][k];
                      }
                      // time#Time
                      result.results[i].result[i2].storage.status.since = resp['results'][i]['result'][i2]['storage']['status']['since'];
                    }
                    // github.com/juju/juju/apiserver/params#Life
                    result.results[i].result[i2].storage.life = resp['results'][i]['result'][i2]['storage']['life'];
                    result.results[i].result[i2].storage.persistent = resp['results'][i]['result'][i2]['storage']['persistent'];
                    result.results[i].result[i2].storage.attachments = {};
                    resp['results'][i]['result'][i2]['storage']['attachments'] = resp['results'][i]['result'][i2]['storage']['attachments'] || {};
                    for (let k in resp['results'][i]['result'][i2]['storage']['attachments']) {
                      // github.com/juju/juju/apiserver/params#StorageAttachmentDetails
                      if (resp['results'][i]['result'][i2]['storage']['attachments'][k]) {
                        result.results[i].result[i2].storage.attachments[k] = {};
                        result.results[i].result[i2].storage.attachments[k].storageTag = resp['results'][i]['result'][i2]['storage']['attachments'][k]['storage-tag'];
                        result.results[i].result[i2].storage.attachments[k].unitTag = resp['results'][i]['result'][i2]['storage']['attachments'][k]['unit-tag'];
                        result.results[i].result[i2].storage.attachments[k].machineTag = resp['results'][i]['result'][i2]['storage']['attachments'][k]['machine-tag'];
                        result.results[i].result[i2].storage.attachments[k].location = resp['results'][i]['result'][i2]['storage']['attachments'][k]['location'];
                        // github.com/juju/juju/apiserver/params#Life
                        result.results[i].result[i2].storage.attachments[k].life = resp['results'][i]['result'][i2]['storage']['attachments'][k]['life'];
                      }
                    }
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListPools returns a list of pools. If filter is provided, returned list
    only contains pools that match the filter. Pools can be filtered on
    names and provider types. If both names and types are provided as
    filter, pools that match either are returned. This method lists union
    of pools and environment provider types. If no filter is provided, all
    pools are returned.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          filters: []{
            names: []string,
            providers: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            storagePools: []{
              name: string,
              provider: string,
              attrs: map[string]anything
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listPools(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#StoragePoolFilters
      if (args) {
        params = {};
        params['filters'] = [];
        args.filters = args.filters || [];
        for (let i = 0; i < args.filters.length; i++) {
          // github.com/juju/juju/apiserver/params#StoragePoolFilter
          if (args.filters[i]) {
            params['filters'][i] = {};
            params['filters'][i]['names'] = [];
            args.filters[i].names = args.filters[i].names || [];
            for (let i2 = 0; i2 < args.filters[i].names.length; i2++) {
              params['filters'][i]['names'][i2] = args.filters[i].names[i2];
            }
            params['filters'][i]['providers'] = [];
            args.filters[i].providers = args.filters[i].providers || [];
            for (let i2 = 0; i2 < args.filters[i].providers.length; i2++) {
              params['filters'][i]['providers'][i2] = args.filters[i].providers[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'ListPools',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#StoragePoolsResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#StoragePoolsResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].storagePools = [];
              resp['results'][i]['storage-pools'] = resp['results'][i]['storage-pools'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['storage-pools'].length; i2++) {
                // github.com/juju/juju/apiserver/params#StoragePool
                if (resp['results'][i]['storage-pools'][i2]) {
                  result.results[i].storagePools[i2] = {};
                  result.results[i].storagePools[i2].name = resp['results'][i]['storage-pools'][i2]['name'];
                  result.results[i].storagePools[i2].provider = resp['results'][i]['storage-pools'][i2]['provider'];
                  result.results[i].storagePools[i2].attrs = {};
                  resp['results'][i]['storage-pools'][i2]['attrs'] = resp['results'][i]['storage-pools'][i2]['attrs'] || {};
                  for (let k in resp['results'][i]['storage-pools'][i2]['attrs']) {
                    result.results[i].storagePools[i2].attrs[k] = resp['results'][i]['storage-pools'][i2]['attrs'][k];
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListStorageDetails returns storage matching a filter.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          filters: []<object>
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: []{
              storageTag: string,
              ownerTag: string,
              kind: int,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              life: string,
              persistent: bool,
              attachments: map[string]{
                storageTag: string,
                unitTag: string,
                machineTag: string,
                location: string,
                life: string
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listStorageDetails(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#StorageFilters
      if (args) {
        params = {};
        params['filters'] = [];
        args.filters = args.filters || [];
        for (let i = 0; i < args.filters.length; i++) {
          // github.com/juju/juju/apiserver/params#StorageFilter
          if (args.filters[i]) {
            params['filters'][i] = {};
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'ListStorageDetails',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#StorageDetailsListResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#StorageDetailsListResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].result = [];
              resp['results'][i]['result'] = resp['results'][i]['result'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['result'].length; i2++) {
                // github.com/juju/juju/apiserver/params#StorageDetails
                if (resp['results'][i]['result'][i2]) {
                  result.results[i].result[i2] = {};
                  result.results[i].result[i2].storageTag = resp['results'][i]['result'][i2]['storage-tag'];
                  result.results[i].result[i2].ownerTag = resp['results'][i]['result'][i2]['owner-tag'];
                  // github.com/juju/juju/apiserver/params#StorageKind
                  result.results[i].result[i2].kind = resp['results'][i]['result'][i2]['kind'];
                  // github.com/juju/juju/apiserver/params#EntityStatus
                  if (resp['results'][i]['result'][i2]['status']) {
                    result.results[i].result[i2].status = {};
                    // github.com/juju/juju/core/status#Status
                    result.results[i].result[i2].status.status = resp['results'][i]['result'][i2]['status']['status'];
                    result.results[i].result[i2].status.info = resp['results'][i]['result'][i2]['status']['info'];
                    result.results[i].result[i2].status.data = {};
                    resp['results'][i]['result'][i2]['status']['data'] = resp['results'][i]['result'][i2]['status']['data'] || {};
                    for (let k in resp['results'][i]['result'][i2]['status']['data']) {
                      result.results[i].result[i2].status.data[k] = resp['results'][i]['result'][i2]['status']['data'][k];
                    }
                    // time#Time
                    result.results[i].result[i2].status.since = resp['results'][i]['result'][i2]['status']['since'];
                  }
                  // github.com/juju/juju/apiserver/params#Life
                  result.results[i].result[i2].life = resp['results'][i]['result'][i2]['life'];
                  result.results[i].result[i2].persistent = resp['results'][i]['result'][i2]['persistent'];
                  result.results[i].result[i2].attachments = {};
                  resp['results'][i]['result'][i2]['attachments'] = resp['results'][i]['result'][i2]['attachments'] || {};
                  for (let k in resp['results'][i]['result'][i2]['attachments']) {
                    // github.com/juju/juju/apiserver/params#StorageAttachmentDetails
                    if (resp['results'][i]['result'][i2]['attachments'][k]) {
                      result.results[i].result[i2].attachments[k] = {};
                      result.results[i].result[i2].attachments[k].storageTag = resp['results'][i]['result'][i2]['attachments'][k]['storage-tag'];
                      result.results[i].result[i2].attachments[k].unitTag = resp['results'][i]['result'][i2]['attachments'][k]['unit-tag'];
                      result.results[i].result[i2].attachments[k].machineTag = resp['results'][i]['result'][i2]['attachments'][k]['machine-tag'];
                      result.results[i].result[i2].attachments[k].location = resp['results'][i]['result'][i2]['attachments'][k]['location'];
                      // github.com/juju/juju/apiserver/params#Life
                      result.results[i].result[i2].attachments[k].life = resp['results'][i]['result'][i2]['attachments'][k]['life'];
                    }
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    ListVolumes lists volumes with the given filters. Each filter produces an
    independent list of volumes, or an error if the filter is invalid or
    the volumes could not be listed.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          filters: []{
            machines: []string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: []{
              volumeTag: string,
              info: {
                volumeId: string,
                hardwareId: string,
                wwn: string,
                pool: string,
                size: int,
                persistent: bool
              },
              life: string,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              machineAttachments: map[string]{
                volumeattachmentinfo: {
                  deviceName: string,
                  deviceLink: string,
                  busAddress: string,
                  readOnly: bool,
                  planInfo: {
                    deviceType: string,
                    deviceAttributes: map[string]string
                  }
                },
                life: string
              },
              unitAttachments: map[string]{
                volumeattachmentinfo: {
                  deviceName: string,
                  deviceLink: string,
                  busAddress: string,
                  readOnly: bool,
                  planInfo: {
                    deviceType: string,
                    deviceAttributes: map[string]string
                  }
                },
                life: string
              },
              storage: {
                storageTag: string,
                ownerTag: string,
                kind: int,
                status: {
                  status: string,
                  info: string,
                  data: map[string]anything,
                  since: time
                },
                life: string,
                persistent: bool,
                attachments: map[string]{
                  storageTag: string,
                  unitTag: string,
                  machineTag: string,
                  location: string,
                  life: string
                }
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  listVolumes(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#VolumeFilters
      if (args) {
        params = {};
        params['filters'] = [];
        args.filters = args.filters || [];
        for (let i = 0; i < args.filters.length; i++) {
          // github.com/juju/juju/apiserver/params#VolumeFilter
          if (args.filters[i]) {
            params['filters'][i] = {};
            params['filters'][i]['machines'] = [];
            args.filters[i].machines = args.filters[i].machines || [];
            for (let i2 = 0; i2 < args.filters[i].machines.length; i2++) {
              params['filters'][i]['machines'][i2] = args.filters[i].machines[i2];
            }
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'ListVolumes',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#VolumeDetailsListResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#VolumeDetailsListResult
            if (resp['results'][i]) {
              result.results[i] = {};
              result.results[i].result = [];
              resp['results'][i]['result'] = resp['results'][i]['result'] || [];
              for (let i2 = 0; i2 < resp['results'][i]['result'].length; i2++) {
                // github.com/juju/juju/apiserver/params#VolumeDetails
                if (resp['results'][i]['result'][i2]) {
                  result.results[i].result[i2] = {};
                  result.results[i].result[i2].volumeTag = resp['results'][i]['result'][i2]['volume-tag'];
                  // github.com/juju/juju/apiserver/params#VolumeInfo
                  if (resp['results'][i]['result'][i2]['info']) {
                    result.results[i].result[i2].info = {};
                    result.results[i].result[i2].info.volumeId = resp['results'][i]['result'][i2]['info']['volume-id'];
                    result.results[i].result[i2].info.hardwareId = resp['results'][i]['result'][i2]['info']['hardware-id'];
                    result.results[i].result[i2].info.wwn = resp['results'][i]['result'][i2]['info']['wwn'];
                    result.results[i].result[i2].info.pool = resp['results'][i]['result'][i2]['info']['pool'];
                    result.results[i].result[i2].info.size = resp['results'][i]['result'][i2]['info']['size'];
                    result.results[i].result[i2].info.persistent = resp['results'][i]['result'][i2]['info']['persistent'];
                  }
                  // github.com/juju/juju/apiserver/params#Life
                  result.results[i].result[i2].life = resp['results'][i]['result'][i2]['life'];
                  // github.com/juju/juju/apiserver/params#EntityStatus
                  if (resp['results'][i]['result'][i2]['status']) {
                    result.results[i].result[i2].status = {};
                    // github.com/juju/juju/core/status#Status
                    result.results[i].result[i2].status.status = resp['results'][i]['result'][i2]['status']['status'];
                    result.results[i].result[i2].status.info = resp['results'][i]['result'][i2]['status']['info'];
                    result.results[i].result[i2].status.data = {};
                    resp['results'][i]['result'][i2]['status']['data'] = resp['results'][i]['result'][i2]['status']['data'] || {};
                    for (let k in resp['results'][i]['result'][i2]['status']['data']) {
                      result.results[i].result[i2].status.data[k] = resp['results'][i]['result'][i2]['status']['data'][k];
                    }
                    // time#Time
                    result.results[i].result[i2].status.since = resp['results'][i]['result'][i2]['status']['since'];
                  }
                  result.results[i].result[i2].machineAttachments = {};
                  resp['results'][i]['result'][i2]['machine-attachments'] = resp['results'][i]['result'][i2]['machine-attachments'] || {};
                  for (let k in resp['results'][i]['result'][i2]['machine-attachments']) {
                    // github.com/juju/juju/apiserver/params#VolumeAttachmentDetails
                    if (resp['results'][i]['result'][i2]['machine-attachments'][k]) {
                      result.results[i].result[i2].machineAttachments[k] = {};
                      // github.com/juju/juju/apiserver/params#VolumeAttachmentInfo
                      if (resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']) {
                        result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo = {};
                        result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.deviceName = resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['device-name'];
                        result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.deviceLink = resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['device-link'];
                        result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.busAddress = resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['bus-address'];
                        result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.readOnly = resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['read-only'];
                        // github.com/juju/juju/apiserver/params#VolumeAttachmentPlanInfo
                        if (resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['plan-info']) {
                          result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.planInfo = {};
                          // github.com/juju/juju/storage#DeviceType
                          result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.planInfo.deviceType = resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-type'];
                          result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.planInfo.deviceAttributes = {};
                          resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes'] = resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes'] || {};
                          for (let k2 in resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes']) {
                            result.results[i].result[i2].machineAttachments[k].volumeattachmentinfo.planInfo.deviceAttributes[k2] = resp['results'][i]['result'][i2]['machine-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes'][k2];
                          }
                        }
                      }
                      // github.com/juju/juju/apiserver/params#Life
                      result.results[i].result[i2].machineAttachments[k].life = resp['results'][i]['result'][i2]['machine-attachments'][k]['life'];
                    }
                  }
                  result.results[i].result[i2].unitAttachments = {};
                  resp['results'][i]['result'][i2]['unit-attachments'] = resp['results'][i]['result'][i2]['unit-attachments'] || {};
                  for (let k in resp['results'][i]['result'][i2]['unit-attachments']) {
                    // github.com/juju/juju/apiserver/params#VolumeAttachmentDetails
                    if (resp['results'][i]['result'][i2]['unit-attachments'][k]) {
                      result.results[i].result[i2].unitAttachments[k] = {};
                      // github.com/juju/juju/apiserver/params#VolumeAttachmentInfo
                      if (resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']) {
                        result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo = {};
                        result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.deviceName = resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['device-name'];
                        result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.deviceLink = resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['device-link'];
                        result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.busAddress = resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['bus-address'];
                        result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.readOnly = resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['read-only'];
                        // github.com/juju/juju/apiserver/params#VolumeAttachmentPlanInfo
                        if (resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['plan-info']) {
                          result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.planInfo = {};
                          // github.com/juju/juju/storage#DeviceType
                          result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.planInfo.deviceType = resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-type'];
                          result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.planInfo.deviceAttributes = {};
                          resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes'] = resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes'] || {};
                          for (let k2 in resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes']) {
                            result.results[i].result[i2].unitAttachments[k].volumeattachmentinfo.planInfo.deviceAttributes[k2] = resp['results'][i]['result'][i2]['unit-attachments'][k]['VolumeAttachmentInfo']['plan-info']['device-attributes'][k2];
                          }
                        }
                      }
                      // github.com/juju/juju/apiserver/params#Life
                      result.results[i].result[i2].unitAttachments[k].life = resp['results'][i]['result'][i2]['unit-attachments'][k]['life'];
                    }
                  }
                  // github.com/juju/juju/apiserver/params#StorageDetails
                  if (resp['results'][i]['result'][i2]['storage']) {
                    result.results[i].result[i2].storage = {};
                    result.results[i].result[i2].storage.storageTag = resp['results'][i]['result'][i2]['storage']['storage-tag'];
                    result.results[i].result[i2].storage.ownerTag = resp['results'][i]['result'][i2]['storage']['owner-tag'];
                    // github.com/juju/juju/apiserver/params#StorageKind
                    result.results[i].result[i2].storage.kind = resp['results'][i]['result'][i2]['storage']['kind'];
                    // github.com/juju/juju/apiserver/params#EntityStatus
                    if (resp['results'][i]['result'][i2]['storage']['status']) {
                      result.results[i].result[i2].storage.status = {};
                      // github.com/juju/juju/core/status#Status
                      result.results[i].result[i2].storage.status.status = resp['results'][i]['result'][i2]['storage']['status']['status'];
                      result.results[i].result[i2].storage.status.info = resp['results'][i]['result'][i2]['storage']['status']['info'];
                      result.results[i].result[i2].storage.status.data = {};
                      resp['results'][i]['result'][i2]['storage']['status']['data'] = resp['results'][i]['result'][i2]['storage']['status']['data'] || {};
                      for (let k in resp['results'][i]['result'][i2]['storage']['status']['data']) {
                        result.results[i].result[i2].storage.status.data[k] = resp['results'][i]['result'][i2]['storage']['status']['data'][k];
                      }
                      // time#Time
                      result.results[i].result[i2].storage.status.since = resp['results'][i]['result'][i2]['storage']['status']['since'];
                    }
                    // github.com/juju/juju/apiserver/params#Life
                    result.results[i].result[i2].storage.life = resp['results'][i]['result'][i2]['storage']['life'];
                    result.results[i].result[i2].storage.persistent = resp['results'][i]['result'][i2]['storage']['persistent'];
                    result.results[i].result[i2].storage.attachments = {};
                    resp['results'][i]['result'][i2]['storage']['attachments'] = resp['results'][i]['result'][i2]['storage']['attachments'] || {};
                    for (let k in resp['results'][i]['result'][i2]['storage']['attachments']) {
                      // github.com/juju/juju/apiserver/params#StorageAttachmentDetails
                      if (resp['results'][i]['result'][i2]['storage']['attachments'][k]) {
                        result.results[i].result[i2].storage.attachments[k] = {};
                        result.results[i].result[i2].storage.attachments[k].storageTag = resp['results'][i]['result'][i2]['storage']['attachments'][k]['storage-tag'];
                        result.results[i].result[i2].storage.attachments[k].unitTag = resp['results'][i]['result'][i2]['storage']['attachments'][k]['unit-tag'];
                        result.results[i].result[i2].storage.attachments[k].machineTag = resp['results'][i]['result'][i2]['storage']['attachments'][k]['machine-tag'];
                        result.results[i].result[i2].storage.attachments[k].location = resp['results'][i]['result'][i2]['storage']['attachments'][k]['location'];
                        // github.com/juju/juju/apiserver/params#Life
                        result.results[i].result[i2].storage.attachments[k].life = resp['results'][i]['result'][i2]['storage']['attachments'][k]['life'];
                      }
                    }
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }

  /**
    StorageDetails retrieves and returns detailed information about desired
    storage identified by supplied tags. If specified storage cannot be
    retrieved, individual error is returned instead of storage information.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              storageTag: string,
              ownerTag: string,
              kind: int,
              status: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time
              },
              life: string,
              persistent: bool,
              attachments: map[string]{
                storageTag: string,
                unitTag: string,
                machineTag: string,
                location: string,
                life: string
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: anything,
                macaroonPath: string
              }
            }
          }
        }
    @return {Promise} Rejected or resolved with the values normally passed to
      the callback when the callback is not provided.
      This allows this method to be awaited.
  */
  storageDetails(args, callback) {
    return new Promise((resolve, reject) => {
      // Prepare request parameters.
      let params;
      // github.com/juju/juju/apiserver/params#Entities
      if (args) {
        params = {};
        params['entities'] = [];
        args.entities = args.entities || [];
        for (let i = 0; i < args.entities.length; i++) {
          // github.com/juju/juju/apiserver/params#Entity
          if (args.entities[i]) {
            params['entities'][i] = {};
            params['entities'][i]['tag'] = args.entities[i].tag;
          }
        }
      }
      // Prepare the request to the Juju API.
      const req = {
        type: 'Storage',
        request: 'StorageDetails',
        version: 3,
        params: params
      };
      // Define a transform method if necessary.
      let transform = null;
      transform = resp => {
        let result;
        // github.com/juju/juju/apiserver/params#StorageDetailsResults
        if (resp) {
          result = {};
          result.results = [];
          resp['results'] = resp['results'] || [];
          for (let i = 0; i < resp['results'].length; i++) {
            // github.com/juju/juju/apiserver/params#StorageDetailsResult
            if (resp['results'][i]) {
              result.results[i] = {};
              // github.com/juju/juju/apiserver/params#StorageDetails
              if (resp['results'][i]['result']) {
                result.results[i].result = {};
                result.results[i].result.storageTag = resp['results'][i]['result']['storage-tag'];
                result.results[i].result.ownerTag = resp['results'][i]['result']['owner-tag'];
                // github.com/juju/juju/apiserver/params#StorageKind
                result.results[i].result.kind = resp['results'][i]['result']['kind'];
                // github.com/juju/juju/apiserver/params#EntityStatus
                if (resp['results'][i]['result']['status']) {
                  result.results[i].result.status = {};
                  // github.com/juju/juju/core/status#Status
                  result.results[i].result.status.status = resp['results'][i]['result']['status']['status'];
                  result.results[i].result.status.info = resp['results'][i]['result']['status']['info'];
                  result.results[i].result.status.data = {};
                  resp['results'][i]['result']['status']['data'] = resp['results'][i]['result']['status']['data'] || {};
                  for (let k in resp['results'][i]['result']['status']['data']) {
                    result.results[i].result.status.data[k] = resp['results'][i]['result']['status']['data'][k];
                  }
                  // time#Time
                  result.results[i].result.status.since = resp['results'][i]['result']['status']['since'];
                }
                // github.com/juju/juju/apiserver/params#Life
                result.results[i].result.life = resp['results'][i]['result']['life'];
                result.results[i].result.persistent = resp['results'][i]['result']['persistent'];
                result.results[i].result.attachments = {};
                resp['results'][i]['result']['attachments'] = resp['results'][i]['result']['attachments'] || {};
                for (let k in resp['results'][i]['result']['attachments']) {
                  // github.com/juju/juju/apiserver/params#StorageAttachmentDetails
                  if (resp['results'][i]['result']['attachments'][k]) {
                    result.results[i].result.attachments[k] = {};
                    result.results[i].result.attachments[k].storageTag = resp['results'][i]['result']['attachments'][k]['storage-tag'];
                    result.results[i].result.attachments[k].unitTag = resp['results'][i]['result']['attachments'][k]['unit-tag'];
                    result.results[i].result.attachments[k].machineTag = resp['results'][i]['result']['attachments'][k]['machine-tag'];
                    result.results[i].result.attachments[k].location = resp['results'][i]['result']['attachments'][k]['location'];
                    // github.com/juju/juju/apiserver/params#Life
                    result.results[i].result.attachments[k].life = resp['results'][i]['result']['attachments'][k]['life'];
                  }
                }
              }
              // github.com/juju/juju/apiserver/params#Error
              if (resp['results'][i]['error']) {
                result.results[i].error = {};
                result.results[i].error.message = resp['results'][i]['error']['message'];
                result.results[i].error.code = resp['results'][i]['error']['code'];
                // github.com/juju/juju/apiserver/params#ErrorInfo
                if (resp['results'][i]['error']['info']) {
                  result.results[i].error.info = {};
                  // gopkg.in/macaroon.v2-unstable#Macaroon
                  result.results[i].error.info.macaroon = resp['results'][i]['error']['info']['macaroon'];
                  result.results[i].error.info.macaroonPath = resp['results'][i]['error']['info']['macaroon-path'];
                }
              }
            }
          }
        }
        return result;
      };

      const handler = createAsyncHandler(callback, resolve, reject, transform);
      // Send the request to the server.
      this._transport.write(req, handler);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapStorage) {
  // Decorate the facade class in order to improve user experience.
  StorageV3 = wrappers.wrapStorage(StorageV3);
}

module.exports = StorageV3;