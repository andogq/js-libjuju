/**
  Juju AllWatcher API facade version 1.
  This file has been generated by the generate command in js-libjuju.
*/

'use strict';


class AllWatcherV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;
  }

  /**
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          deltas: []{
            entity: <object> (required),
            removed: boolean (required)
          } (required)
        }
  */
  next(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'AllWatcher',
      request: 'Next',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      result = {};
      resp = resp || {};
      result.deltas = [];
      resp['deltas'] = resp['deltas'] || [];
      for (let i1 = 0; i1 < resp['deltas'].length; i1++) {
        result.deltas[i1] = {};
        resp['deltas'][i1] = resp['deltas'][i1] || {};
        result.deltas[i1].entity = {};
        resp['deltas'][i1]['entity'] = resp['deltas'][i1]['entity'] || {};
        result.deltas[i1].entity = resp['deltas'][i1]['entity'];
        result.deltas[i1].removed = resp['deltas'][i1]['removed'];
      }
      callback(null, result);
    });
  }

  /**
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  stop(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'AllWatcher',
      request: 'Stop',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapAllWatcher) {
  AllWatcherV1 = wrappers.wrapAllWatcher(AllWatcherV1);
}

module.exports = AllWatcherV1;
