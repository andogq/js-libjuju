/**
  Juju Bundle version 1.
  This API facade is available on both controller and model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Wed 2042/01/01 16:42:47 UTC. Do not manually edit this file.
*/

'use strict';


/**
  Bundle defines the API endpoint used for changes.
*/
class BundleV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;
  }

  /**
    GetChanges returns the list of changes required to deploy the given bundle
    data.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          yaml: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          changes: []{
            id: string,
            method: string,
            args: []anything,
            requires: []string
          },
          errors: []string
        }
  */
  getChanges(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#BundleChangesParams
    params = {};
    args = args || {};
    params['yaml'] = args.yaml;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Bundle',
      request: 'GetChanges',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#BundleChangesResults
      result = {};
      resp = resp || {};
      result.changes = [];
      resp['changes'] = resp['changes'] || [];
      for (let _s2 = 0; _s2 < resp['changes'].length; _s2++) {
        // github.com/juju/juju/apiserver/params#BundleChange
        result.changes[_s2] = {};
        resp['changes'][_s2] = resp['changes'][_s2] || {};
        result.changes[_s2].id = resp['changes'][_s2]['id'];
        result.changes[_s2].method = resp['changes'][_s2]['method'];
        result.changes[_s2].args = [];
        resp['changes'][_s2]['args'] = resp['changes'][_s2]['args'] || [];
        for (let _s3 = 0; _s3 < resp['changes'][_s2]['args'].length; _s3++) {
          result.changes[_s2].args[_s3] = resp['changes'][_s2]['args'][_s3] || undefined;
        }
        result.changes[_s2].requires = [];
        resp['changes'][_s2]['requires'] = resp['changes'][_s2]['requires'] || [];
        for (let _s4 = 0; _s4 < resp['changes'][_s2]['requires'].length; _s4++) {
          result.changes[_s2].requires[_s4] = resp['changes'][_s2]['requires'][_s4] || undefined;
        }
      }
      result.errors = [];
      resp['errors'] = resp['errors'] || [];
      for (let _s5 = 0; _s5 < resp['errors'].length; _s5++) {
        result.errors[_s5] = resp['errors'][_s5] || undefined;
      }
      callback(null, result);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapBundle) {
  // Decorate the facade class in order to improve user experience.
  BundleV1 = wrappers.wrapBundle(BundleV1);
}

module.exports = BundleV1;
