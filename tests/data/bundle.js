/**
  Juju Bundle API facade version 1.
  This file has been generated by the generate command in js-libjuju.
*/

'use strict';


class BundleV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;
  }

  /**
    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          yaml: string (required)
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          changes: []{
            args: []<object> (required),
            id: string (required),
            method: string (required),
            requires: []string (required)
          },
          errors: []string
        }
  */
  getChanges(args, callback) {
    // Prepare request parameters.
    let params;
    params = {};
    args = args || {};
    params['yaml'] = args.yaml;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Bundle',
      request: 'GetChanges',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      result = {};
      resp = resp || {};
      result.changes = [];
      resp['changes'] = resp['changes'] || [];
      for (let i2 = 0; i2 < resp['changes'].length; i2++) {
        result.changes[i2] = {};
        resp['changes'][i2] = resp['changes'][i2] || {};
        result.changes[i2].args = [];
        resp['changes'][i2]['args'] = resp['changes'][i2]['args'] || [];
        for (let i3 = 0; i3 < resp['changes'][i2]['args'].length; i3++) {
          result.changes[i2].args[i3] = {};
          resp['changes'][i2]['args'][i3] = resp['changes'][i2]['args'][i3] || {};
          result.changes[i2].args[i3] = resp['changes'][i2]['args'][i3];
        }
        result.changes[i2].id = resp['changes'][i2]['id'];
        result.changes[i2].method = resp['changes'][i2]['method'];
        result.changes[i2].requires = [];
        resp['changes'][i2]['requires'] = resp['changes'][i2]['requires'] || [];
        for (let i4 = 0; i4 < resp['changes'][i2]['requires'].length; i4++) {
          result.changes[i2].requires[i4] = resp['changes'][i2]['requires'][i4] || undefined;
        }
      }
      result.errors = [];
      resp['errors'] = resp['errors'] || [];
      for (let i5 = 0; i5 < resp['errors'].length; i5++) {
        result.errors[i5] = resp['errors'][i5] || undefined;
      }
      callback(null, result);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapBundle) {
  BundleV1 = wrappers.wrapBundle(BundleV1);
}

module.exports = BundleV1;
